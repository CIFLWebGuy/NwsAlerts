/* 
 * weather.gov API
 *
 * weather.gov API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given area (state or marine area)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"></param>
        /// <returns></returns>
        void AlertsActiveAreaAreaGet (string area);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given area (state or marine area)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsActiveAreaAreaGetWithHttpInfo (string area);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info on the number of active alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void AlertsActiveCountGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info on the number of active alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsActiveCountGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all currently active alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="_event">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="regionType">Region type (land or marine)  This parameter is incompatible with the following parameters: area, point, region, zone (optional)</param>
        /// <param name="point">Point (latitude,longitude)  This parameter is incompatible with the following parameters: area, region, region_type, zone (optional)</param>
        /// <param name="region">Marine region code  This parameter is incompatible with the following parameters: area, point, region_type, zone (optional)</param>
        /// <param name="area">State/marine area code  This parameter is incompatible with the following parameters: point, region, region_type, zone (optional)</param>
        /// <param name="zone">Zone ID (forecast or county)  This parameter is incompatible with the following parameters: area, point, region, region_type (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns></returns>
        void AlertsActiveGet (List<string> status = null, List<string> messageType = null, List<string> _event = null, List<string> code = null, string regionType = null, string point = null, List<string> region = null, List<string> area = null, List<string> zone = null, List<string> urgency = null, List<string> severity = null, List<string> certainty = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all currently active alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="_event">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="regionType">Region type (land or marine)  This parameter is incompatible with the following parameters: area, point, region, zone (optional)</param>
        /// <param name="point">Point (latitude,longitude)  This parameter is incompatible with the following parameters: area, region, region_type, zone (optional)</param>
        /// <param name="region">Marine region code  This parameter is incompatible with the following parameters: area, point, region_type, zone (optional)</param>
        /// <param name="area">State/marine area code  This parameter is incompatible with the following parameters: point, region, region_type, zone (optional)</param>
        /// <param name="zone">Zone ID (forecast or county)  This parameter is incompatible with the following parameters: area, point, region, region_type (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsActiveGetWithHttpInfo (List<string> status = null, List<string> messageType = null, List<string> _event = null, List<string> code = null, string regionType = null, string point = null, List<string> region = null, List<string> area = null, List<string> zone = null, List<string> urgency = null, List<string> severity = null, List<string> certainty = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given marine region
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region"></param>
        /// <returns></returns>
        void AlertsActiveRegionRegionGet (string region);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given marine region
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsActiveRegionRegionGetWithHttpInfo (string region);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns></returns>
        void AlertsActiveZoneZoneIdGet (string zoneId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsActiveZoneZoneIdGetWithHttpInfo (string zoneId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">Active alerts (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="_event">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="regionType">Region type (land or marine)  This parameter is incompatible with the following parameters: area, point, region, zone (optional)</param>
        /// <param name="point">Point (latitude,longitude)  This parameter is incompatible with the following parameters: area, region, region_type, zone (optional)</param>
        /// <param name="region">Marine region code  This parameter is incompatible with the following parameters: area, point, region_type, zone (optional)</param>
        /// <param name="area">State/marine area code  This parameter is incompatible with the following parameters: point, region, region_type, zone (optional)</param>
        /// <param name="zone">Zone ID (forecast or county)  This parameter is incompatible with the following parameters: area, point, region, region_type (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <returns></returns>
        void AlertsGet (bool? active = null, DateTime? start = null, DateTime? end = null, List<string> status = null, List<string> messageType = null, List<string> _event = null, List<string> code = null, string regionType = null, string point = null, List<string> region = null, List<string> area = null, List<string> zone = null, List<string> urgency = null, List<string> severity = null, List<string> certainty = null, int? limit = null, string cursor = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">Active alerts (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="_event">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="regionType">Region type (land or marine)  This parameter is incompatible with the following parameters: area, point, region, zone (optional)</param>
        /// <param name="point">Point (latitude,longitude)  This parameter is incompatible with the following parameters: area, region, region_type, zone (optional)</param>
        /// <param name="region">Marine region code  This parameter is incompatible with the following parameters: area, point, region_type, zone (optional)</param>
        /// <param name="area">State/marine area code  This parameter is incompatible with the following parameters: point, region, region_type, zone (optional)</param>
        /// <param name="zone">Zone ID (forecast or county)  This parameter is incompatible with the following parameters: area, point, region, region_type (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsGetWithHttpInfo (bool? active = null, DateTime? start = null, DateTime? end = null, List<string> status = null, List<string> messageType = null, List<string> _event = null, List<string> code = null, string regionType = null, string point = null, List<string> region = null, List<string> area = null, List<string> zone = null, List<string> urgency = null, List<string> severity = null, List<string> certainty = null, int? limit = null, string cursor = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific alert
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void AlertsIdGet (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific alert
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsIdGetWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of alert types
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void AlertsTypesGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of alert types
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsTypesGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns glossary terms
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void GlossaryGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns glossary terms
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GlossaryGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual forecast for a 2.5km grid area
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info):  * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional, default to us)</param>
        /// <returns></returns>
        void GridpointsWfoXyForecastGet (string wfo, int? x, int? y, List<string> featureFlags = null, string units = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual forecast for a 2.5km grid area
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info):  * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional, default to us)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GridpointsWfoXyForecastGetWithHttpInfo (string wfo, int? x, int? y, List<string> featureFlags = null, string units = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual hourly forecast for a 2.5km grid area
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info):  * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional, default to us)</param>
        /// <returns></returns>
        void GridpointsWfoXyForecastHourlyGet (string wfo, int? x, int? y, List<string> featureFlags = null, string units = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual hourly forecast for a 2.5km grid area
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info):  * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional, default to us)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GridpointsWfoXyForecastHourlyGetWithHttpInfo (string wfo, int? x, int? y, List<string> featureFlags = null, string units = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns raw numerical forecast data for a 2.5km grid area
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns></returns>
        void GridpointsWfoXyGet (string wfo, int? x, int? y);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns raw numerical forecast data for a 2.5km grid area
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GridpointsWfoXyGetWithHttpInfo (string wfo, int? x, int? y);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations usable for a given 2.5km grid area
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns></returns>
        void GridpointsWfoXyStationsGet (string wfo, int? x, int? y);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations usable for a given 2.5km grid area
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GridpointsWfoXyStationsGetWithHttpInfo (string wfo, int? x, int? y);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of icon codes and textual descriptions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void IconsGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of icon codes and textual descriptions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IconsGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a forecast icon
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set"></param>
        /// <param name="timeOfDay"></param>
        /// <param name="first"></param>
        /// <param name="second"></param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <returns></returns>
        void IconsSetTimeOfDayFirstSecondGet (string set, string timeOfDay, string first, string second, Size size = null, int? fontsize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a forecast icon
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set"></param>
        /// <param name="timeOfDay"></param>
        /// <param name="first"></param>
        /// <param name="second"></param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IconsSetTimeOfDayFirstSecondGetWithHttpInfo (string set, string timeOfDay, string first, string second, Size size = null, int? fontsize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a NWS forecast office
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <returns></returns>
        void OfficesOfficeIdGet (string officeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a NWS forecast office
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OfficesOfficeIdGetWithHttpInfo (string officeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of news headlines for a given NWS office
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <returns></returns>
        void OfficesOfficeIdHeadlinesGet (string officeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of news headlines for a given NWS office
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OfficesOfficeIdHeadlinesGetWithHttpInfo (string officeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific news headline for a given NWS office
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <param name="headlineId"></param>
        /// <returns></returns>
        void OfficesOfficeIdHeadlinesHeadlineIdGet (string officeId, string headlineId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific news headline for a given NWS office
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <param name="headlineId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> OfficesOfficeIdHeadlinesHeadlineIdGetWithHttpInfo (string officeId, string headlineId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual forecast for a given point
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns></returns>
        void PointsPointForecastGet (string point);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual forecast for a given point
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PointsPointForecastGetWithHttpInfo (string point);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual hourly forecast for a given point
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns></returns>
        void PointsPointForecastHourlyGet (string point);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual hourly forecast for a given point
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PointsPointForecastHourlyGetWithHttpInfo (string point);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given latitude/longitude point
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns></returns>
        void PointsPointGet (string point);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given latitude/longitude point
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PointsPointGetWithHttpInfo (string point);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations for a given point
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns></returns>
        void PointsPointStationsGet (string point);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations for a given point
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PointsPointStationsGetWithHttpInfo (string point);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location id (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="office">Issuing office (optional)</param>
        /// <param name="wmoid">WMO id code (optional)</param>
        /// <param name="type">Product code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns></returns>
        void ProductsGet (List<string> location = null, DateTime? start = null, DateTime? end = null, List<string> office = null, List<string> wmoid = null, List<string> type = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location id (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="office">Issuing office (optional)</param>
        /// <param name="wmoid">WMO id code (optional)</param>
        /// <param name="type">Product code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductsGetWithHttpInfo (List<string> location = null, DateTime? start = null, DateTime? end = null, List<string> office = null, List<string> wmoid = null, List<string> type = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product issuance locations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ProductsLocationsGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product issuance locations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductsLocationsGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product types for a given issuance location
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <returns></returns>
        void ProductsLocationsLocationIdTypesGet (string locationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product types for a given issuance location
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductsLocationsLocationIdTypesGetWithHttpInfo (string locationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific text product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns></returns>
        void ProductsProductIdGet (string productId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific text product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductsProductIdGetWithHttpInfo (string productId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product types and codes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void ProductsTypesGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product types and codes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductsTypesGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products of a given type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <returns></returns>
        void ProductsTypesTypeIdGet (string typeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products of a given type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductsTypesTypeIdGetWithHttpInfo (string typeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product issuance locations for a given product type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <returns></returns>
        void ProductsTypesTypeIdLocationsGet (string typeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product issuance locations for a given product type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductsTypesTypeIdLocationsGetWithHttpInfo (string typeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products of a given type for a given issuance location
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <param name="locationId"></param>
        /// <returns></returns>
        void ProductsTypesTypeIdLocationsLocationIdGet (string typeId, string locationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products of a given type for a given issuance location
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <param name="locationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductsTypesTypeIdLocationsLocationIdGetWithHttpInfo (string typeId, string locationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar wind profiler
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="time">Time interval (optional)</param>
        /// <param name="interval">Averaging interval (optional)</param>
        /// <returns></returns>
        void RadarProfilersStationIdGet (string stationId, string time = null, string interval = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar wind profiler
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="time">Time interval (optional)</param>
        /// <param name="interval">Averaging interval (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RadarProfilersStationIdGetWithHttpInfo (string stationId, string time = null, string interval = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar queue
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host"></param>
        /// <param name="limit">Record limit (optional)</param>
        /// <param name="arrived">Range for arrival time (optional)</param>
        /// <param name="created">Range for creation time (optional)</param>
        /// <param name="published">Range for publish time (optional)</param>
        /// <param name="station">Station identifier (optional)</param>
        /// <param name="type">Record type (optional)</param>
        /// <param name="feed">Originating product feed (optional)</param>
        /// <param name="resolution">Resolution version (optional)</param>
        /// <returns></returns>
        void RadarQueuesHostGet (string host, int? limit = null, string arrived = null, string created = null, string published = null, string station = null, string type = null, string feed = null, int? resolution = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar queue
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host"></param>
        /// <param name="limit">Record limit (optional)</param>
        /// <param name="arrived">Range for arrival time (optional)</param>
        /// <param name="created">Range for creation time (optional)</param>
        /// <param name="published">Range for publish time (optional)</param>
        /// <param name="station">Station identifier (optional)</param>
        /// <param name="type">Record type (optional)</param>
        /// <param name="feed">Originating product feed (optional)</param>
        /// <param name="resolution">Resolution version (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RadarQueuesHostGetWithHttpInfo (string host, int? limit = null, string arrived = null, string created = null, string published = null, string station = null, string type = null, string feed = null, int? resolution = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of radar servers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <returns></returns>
        void RadarServersGet (string reportingHost = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of radar servers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RadarServersGetWithHttpInfo (string reportingHost = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar server
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <returns></returns>
        void RadarServersIdGet (string id, string reportingHost = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar server
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RadarServersIdGetWithHttpInfo (string id, string reportingHost = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of radar stations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationType">Limit results to a specific station type or types (optional)</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <returns></returns>
        void RadarStationsGet (List<string> stationType = null, string reportingHost = null, string host = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of radar stations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationType">Limit results to a specific station type or types (optional)</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RadarStationsGetWithHttpInfo (List<string> stationType = null, string reportingHost = null, string host = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar station alarms
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns></returns>
        void RadarStationsStationIdAlarmsGet (string stationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar station alarms
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RadarStationsStationIdAlarmsGetWithHttpInfo (string stationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar station
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <returns></returns>
        void RadarStationsStationIdGet (string stationId, string reportingHost = null, string host = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar station
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RadarStationsStationIdGetWithHttpInfo (string stationId, string reportingHost = null, string host = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">State abbreviation (optional)</param>
        /// <param name="state">State/marine area code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns></returns>
        void StationsGet (List<string> id = null, List<string> state = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">State abbreviation (optional)</param>
        /// <param name="state">State/marine area code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StationsGetWithHttpInfo (List<string> id = null, List<string> state = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given observation station
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns></returns>
        void StationsStationIdGet (string stationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given observation station
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StationsStationIdGetWithHttpInfo (string stationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the latest observation for a station (use &#x27;/latest&#x27; instead)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <returns></returns>
        void StationsStationIdObservationsCurrentGet (string stationId, bool? requireQc = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the latest observation for a station (use &#x27;/latest&#x27; instead)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StationsStationIdObservationsCurrentGetWithHttpInfo (string stationId, bool? requireQc = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observations for a given station
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="station">Station ID (optional)</param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns></returns>
        void StationsStationIdObservationsGet (string stationId, List<string> station = null, DateTime? start = null, DateTime? end = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observations for a given station
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="station">Station ID (optional)</param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StationsStationIdObservationsGetWithHttpInfo (string stationId, List<string> station = null, DateTime? start = null, DateTime? end = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the latest observation for a station
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <returns></returns>
        void StationsStationIdObservationsLatestGet (string stationId, bool? requireQc = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the latest observation for a station
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StationsStationIdObservationsLatestGetWithHttpInfo (string stationId, bool? requireQc = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single observation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="time"></param>
        /// <returns></returns>
        void StationsStationIdObservationsTimeGet (string stationId, DateTime? time);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single observation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="time"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StationsStationIdObservationsTimeGetWithHttpInfo (string stationId, DateTime? time);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thumbnail image for a satellite region
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"></param>
        /// <returns></returns>
        void ThumbnailsSatelliteAreaGet (string area);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thumbnail image for a satellite region
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ThumbnailsSatelliteAreaGetWithHttpInfo (string area);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observations for a given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns></returns>
        void ZonesForecastZoneIdObservationsGet (string zoneId, DateTime? start = null, DateTime? end = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observations for a given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ZonesForecastZoneIdObservationsGetWithHttpInfo (string zoneId, DateTime? start = null, DateTime? end = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations for a given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns></returns>
        void ZonesForecastZoneIdStationsGet (string zoneId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations for a given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ZonesForecastZoneIdStationsGetWithHttpInfo (string zoneId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of zones
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns></returns>
        void ZonesGet (List<string> id = null, List<string> area = null, List<string> region = null, List<string> type = null, string point = null, bool? includeGeometry = null, int? limit = null, DateTime? effective = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of zones
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ZonesGetWithHttpInfo (List<string> id = null, List<string> area = null, List<string> region = null, List<string> type = null, string point = null, bool? includeGeometry = null, int? limit = null, DateTime? effective = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of zones of a given type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns></returns>
        void ZonesTypeGet (string type, List<string> id = null, List<string> area = null, List<string> region = null, List<string> type = null, string point = null, bool? includeGeometry = null, int? limit = null, DateTime? effective = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of zones of a given type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ZonesTypeGetWithHttpInfo (string type, List<string> id = null, List<string> area = null, List<string> region = null, List<string> type = null, string point = null, bool? includeGeometry = null, int? limit = null, DateTime? effective = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current zone forecast for a given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="zoneId"></param>
        /// <returns></returns>
        void ZonesTypeZoneIdForecastGet (string type, string zoneId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current zone forecast for a given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ZonesTypeZoneIdForecastGetWithHttpInfo (string type, string zoneId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="zoneId"></param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns></returns>
        void ZonesTypeZoneIdGet (string type, string zoneId, DateTime? effective = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="zoneId"></param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ZonesTypeZoneIdGetWithHttpInfo (string type, string zoneId, DateTime? effective = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given area (state or marine area)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsActiveAreaAreaGetAsync (string area);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given area (state or marine area)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsActiveAreaAreaGetAsyncWithHttpInfo (string area);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info on the number of active alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsActiveCountGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns info on the number of active alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsActiveCountGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all currently active alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="_event">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="regionType">Region type (land or marine)  This parameter is incompatible with the following parameters: area, point, region, zone (optional)</param>
        /// <param name="point">Point (latitude,longitude)  This parameter is incompatible with the following parameters: area, region, region_type, zone (optional)</param>
        /// <param name="region">Marine region code  This parameter is incompatible with the following parameters: area, point, region_type, zone (optional)</param>
        /// <param name="area">State/marine area code  This parameter is incompatible with the following parameters: point, region, region_type, zone (optional)</param>
        /// <param name="zone">Zone ID (forecast or county)  This parameter is incompatible with the following parameters: area, point, region, region_type (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsActiveGetAsync (List<string> status = null, List<string> messageType = null, List<string> _event = null, List<string> code = null, string regionType = null, string point = null, List<string> region = null, List<string> area = null, List<string> zone = null, List<string> urgency = null, List<string> severity = null, List<string> certainty = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all currently active alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="_event">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="regionType">Region type (land or marine)  This parameter is incompatible with the following parameters: area, point, region, zone (optional)</param>
        /// <param name="point">Point (latitude,longitude)  This parameter is incompatible with the following parameters: area, region, region_type, zone (optional)</param>
        /// <param name="region">Marine region code  This parameter is incompatible with the following parameters: area, point, region_type, zone (optional)</param>
        /// <param name="area">State/marine area code  This parameter is incompatible with the following parameters: point, region, region_type, zone (optional)</param>
        /// <param name="zone">Zone ID (forecast or county)  This parameter is incompatible with the following parameters: area, point, region, region_type (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsActiveGetAsyncWithHttpInfo (List<string> status = null, List<string> messageType = null, List<string> _event = null, List<string> code = null, string regionType = null, string point = null, List<string> region = null, List<string> area = null, List<string> zone = null, List<string> urgency = null, List<string> severity = null, List<string> certainty = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given marine region
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsActiveRegionRegionGetAsync (string region);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given marine region
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsActiveRegionRegionGetAsyncWithHttpInfo (string region);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsActiveZoneZoneIdGetAsync (string zoneId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns active alerts for the given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsActiveZoneZoneIdGetAsyncWithHttpInfo (string zoneId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">Active alerts (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="_event">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="regionType">Region type (land or marine)  This parameter is incompatible with the following parameters: area, point, region, zone (optional)</param>
        /// <param name="point">Point (latitude,longitude)  This parameter is incompatible with the following parameters: area, region, region_type, zone (optional)</param>
        /// <param name="region">Marine region code  This parameter is incompatible with the following parameters: area, point, region_type, zone (optional)</param>
        /// <param name="area">State/marine area code  This parameter is incompatible with the following parameters: point, region, region_type, zone (optional)</param>
        /// <param name="zone">Zone ID (forecast or county)  This parameter is incompatible with the following parameters: area, point, region, region_type (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsGetAsync (bool? active = null, DateTime? start = null, DateTime? end = null, List<string> status = null, List<string> messageType = null, List<string> _event = null, List<string> code = null, string regionType = null, string point = null, List<string> region = null, List<string> area = null, List<string> zone = null, List<string> urgency = null, List<string> severity = null, List<string> certainty = null, int? limit = null, string cursor = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all alerts
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">Active alerts (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="_event">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="regionType">Region type (land or marine)  This parameter is incompatible with the following parameters: area, point, region, zone (optional)</param>
        /// <param name="point">Point (latitude,longitude)  This parameter is incompatible with the following parameters: area, region, region_type, zone (optional)</param>
        /// <param name="region">Marine region code  This parameter is incompatible with the following parameters: area, point, region_type, zone (optional)</param>
        /// <param name="area">State/marine area code  This parameter is incompatible with the following parameters: point, region, region_type, zone (optional)</param>
        /// <param name="zone">Zone ID (forecast or county)  This parameter is incompatible with the following parameters: area, point, region, region_type (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsGetAsyncWithHttpInfo (bool? active = null, DateTime? start = null, DateTime? end = null, List<string> status = null, List<string> messageType = null, List<string> _event = null, List<string> code = null, string regionType = null, string point = null, List<string> region = null, List<string> area = null, List<string> zone = null, List<string> urgency = null, List<string> severity = null, List<string> certainty = null, int? limit = null, string cursor = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific alert
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsIdGetAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific alert
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of alert types
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsTypesGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of alert types
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsTypesGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns glossary terms
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GlossaryGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns glossary terms
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GlossaryGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual forecast for a 2.5km grid area
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info):  * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional, default to us)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GridpointsWfoXyForecastGetAsync (string wfo, int? x, int? y, List<string> featureFlags = null, string units = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual forecast for a 2.5km grid area
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info):  * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional, default to us)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GridpointsWfoXyForecastGetAsyncWithHttpInfo (string wfo, int? x, int? y, List<string> featureFlags = null, string units = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual hourly forecast for a 2.5km grid area
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info):  * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional, default to us)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GridpointsWfoXyForecastHourlyGetAsync (string wfo, int? x, int? y, List<string> featureFlags = null, string units = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual hourly forecast for a 2.5km grid area
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info):  * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional, default to us)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GridpointsWfoXyForecastHourlyGetAsyncWithHttpInfo (string wfo, int? x, int? y, List<string> featureFlags = null, string units = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns raw numerical forecast data for a 2.5km grid area
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GridpointsWfoXyGetAsync (string wfo, int? x, int? y);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns raw numerical forecast data for a 2.5km grid area
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GridpointsWfoXyGetAsyncWithHttpInfo (string wfo, int? x, int? y);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations usable for a given 2.5km grid area
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GridpointsWfoXyStationsGetAsync (string wfo, int? x, int? y);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations usable for a given 2.5km grid area
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GridpointsWfoXyStationsGetAsyncWithHttpInfo (string wfo, int? x, int? y);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of icon codes and textual descriptions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IconsGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of icon codes and textual descriptions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IconsGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a forecast icon
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set"></param>
        /// <param name="timeOfDay"></param>
        /// <param name="first"></param>
        /// <param name="second"></param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IconsSetTimeOfDayFirstSecondGetAsync (string set, string timeOfDay, string first, string second, Size size = null, int? fontsize = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a forecast icon
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set"></param>
        /// <param name="timeOfDay"></param>
        /// <param name="first"></param>
        /// <param name="second"></param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IconsSetTimeOfDayFirstSecondGetAsyncWithHttpInfo (string set, string timeOfDay, string first, string second, Size size = null, int? fontsize = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a NWS forecast office
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OfficesOfficeIdGetAsync (string officeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a NWS forecast office
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OfficesOfficeIdGetAsyncWithHttpInfo (string officeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of news headlines for a given NWS office
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OfficesOfficeIdHeadlinesGetAsync (string officeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of news headlines for a given NWS office
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OfficesOfficeIdHeadlinesGetAsyncWithHttpInfo (string officeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific news headline for a given NWS office
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <param name="headlineId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task OfficesOfficeIdHeadlinesHeadlineIdGetAsync (string officeId, string headlineId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific news headline for a given NWS office
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <param name="headlineId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OfficesOfficeIdHeadlinesHeadlineIdGetAsyncWithHttpInfo (string officeId, string headlineId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual forecast for a given point
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PointsPointForecastGetAsync (string point);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual forecast for a given point
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PointsPointForecastGetAsyncWithHttpInfo (string point);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual hourly forecast for a given point
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PointsPointForecastHourlyGetAsync (string point);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a textual hourly forecast for a given point
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PointsPointForecastHourlyGetAsyncWithHttpInfo (string point);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given latitude/longitude point
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PointsPointGetAsync (string point);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given latitude/longitude point
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PointsPointGetAsyncWithHttpInfo (string point);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations for a given point
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PointsPointStationsGetAsync (string point);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations for a given point
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PointsPointStationsGetAsyncWithHttpInfo (string point);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location id (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="office">Issuing office (optional)</param>
        /// <param name="wmoid">WMO id code (optional)</param>
        /// <param name="type">Product code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductsGetAsync (List<string> location = null, DateTime? start = null, DateTime? end = null, List<string> office = null, List<string> wmoid = null, List<string> type = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location id (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="office">Issuing office (optional)</param>
        /// <param name="wmoid">WMO id code (optional)</param>
        /// <param name="type">Product code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductsGetAsyncWithHttpInfo (List<string> location = null, DateTime? start = null, DateTime? end = null, List<string> office = null, List<string> wmoid = null, List<string> type = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product issuance locations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductsLocationsGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product issuance locations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductsLocationsGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product types for a given issuance location
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductsLocationsLocationIdTypesGetAsync (string locationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product types for a given issuance location
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductsLocationsLocationIdTypesGetAsyncWithHttpInfo (string locationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific text product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductsProductIdGetAsync (string productId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a specific text product
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductsProductIdGetAsyncWithHttpInfo (string productId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product types and codes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductsTypesGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product types and codes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductsTypesGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products of a given type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductsTypesTypeIdGetAsync (string typeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products of a given type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductsTypesTypeIdGetAsyncWithHttpInfo (string typeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product issuance locations for a given product type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductsTypesTypeIdLocationsGetAsync (string typeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of valid text product issuance locations for a given product type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductsTypesTypeIdLocationsGetAsyncWithHttpInfo (string typeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products of a given type for a given issuance location
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <param name="locationId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductsTypesTypeIdLocationsLocationIdGetAsync (string typeId, string locationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of text products of a given type for a given issuance location
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <param name="locationId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductsTypesTypeIdLocationsLocationIdGetAsyncWithHttpInfo (string typeId, string locationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar wind profiler
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="time">Time interval (optional)</param>
        /// <param name="interval">Averaging interval (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RadarProfilersStationIdGetAsync (string stationId, string time = null, string interval = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar wind profiler
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="time">Time interval (optional)</param>
        /// <param name="interval">Averaging interval (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RadarProfilersStationIdGetAsyncWithHttpInfo (string stationId, string time = null, string interval = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar queue
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host"></param>
        /// <param name="limit">Record limit (optional)</param>
        /// <param name="arrived">Range for arrival time (optional)</param>
        /// <param name="created">Range for creation time (optional)</param>
        /// <param name="published">Range for publish time (optional)</param>
        /// <param name="station">Station identifier (optional)</param>
        /// <param name="type">Record type (optional)</param>
        /// <param name="feed">Originating product feed (optional)</param>
        /// <param name="resolution">Resolution version (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RadarQueuesHostGetAsync (string host, int? limit = null, string arrived = null, string created = null, string published = null, string station = null, string type = null, string feed = null, int? resolution = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar queue
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host"></param>
        /// <param name="limit">Record limit (optional)</param>
        /// <param name="arrived">Range for arrival time (optional)</param>
        /// <param name="created">Range for creation time (optional)</param>
        /// <param name="published">Range for publish time (optional)</param>
        /// <param name="station">Station identifier (optional)</param>
        /// <param name="type">Record type (optional)</param>
        /// <param name="feed">Originating product feed (optional)</param>
        /// <param name="resolution">Resolution version (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RadarQueuesHostGetAsyncWithHttpInfo (string host, int? limit = null, string arrived = null, string created = null, string published = null, string station = null, string type = null, string feed = null, int? resolution = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of radar servers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RadarServersGetAsync (string reportingHost = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of radar servers
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RadarServersGetAsyncWithHttpInfo (string reportingHost = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar server
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RadarServersIdGetAsync (string id, string reportingHost = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar server
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RadarServersIdGetAsyncWithHttpInfo (string id, string reportingHost = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of radar stations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationType">Limit results to a specific station type or types (optional)</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RadarStationsGetAsync (List<string> stationType = null, string reportingHost = null, string host = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of radar stations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationType">Limit results to a specific station type or types (optional)</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RadarStationsGetAsyncWithHttpInfo (List<string> stationType = null, string reportingHost = null, string host = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar station alarms
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RadarStationsStationIdAlarmsGetAsync (string stationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar station alarms
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RadarStationsStationIdAlarmsGetAsyncWithHttpInfo (string stationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar station
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RadarStationsStationIdGetAsync (string stationId, string reportingHost = null, string host = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given radar station
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RadarStationsStationIdGetAsyncWithHttpInfo (string stationId, string reportingHost = null, string host = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">State abbreviation (optional)</param>
        /// <param name="state">State/marine area code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StationsGetAsync (List<string> id = null, List<string> state = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">State abbreviation (optional)</param>
        /// <param name="state">State/marine area code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StationsGetAsyncWithHttpInfo (List<string> id = null, List<string> state = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given observation station
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StationsStationIdGetAsync (string stationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given observation station
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StationsStationIdGetAsyncWithHttpInfo (string stationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the latest observation for a station (use &#x27;/latest&#x27; instead)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StationsStationIdObservationsCurrentGetAsync (string stationId, bool? requireQc = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the latest observation for a station (use &#x27;/latest&#x27; instead)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StationsStationIdObservationsCurrentGetAsyncWithHttpInfo (string stationId, bool? requireQc = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observations for a given station
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="station">Station ID (optional)</param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StationsStationIdObservationsGetAsync (string stationId, List<string> station = null, DateTime? start = null, DateTime? end = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observations for a given station
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="station">Station ID (optional)</param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StationsStationIdObservationsGetAsyncWithHttpInfo (string stationId, List<string> station = null, DateTime? start = null, DateTime? end = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the latest observation for a station
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StationsStationIdObservationsLatestGetAsync (string stationId, bool? requireQc = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the latest observation for a station
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StationsStationIdObservationsLatestGetAsyncWithHttpInfo (string stationId, bool? requireQc = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single observation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="time"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StationsStationIdObservationsTimeGetAsync (string stationId, DateTime? time);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a single observation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="time"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StationsStationIdObservationsTimeGetAsyncWithHttpInfo (string stationId, DateTime? time);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thumbnail image for a satellite region
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ThumbnailsSatelliteAreaGetAsync (string area);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thumbnail image for a satellite region
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ThumbnailsSatelliteAreaGetAsyncWithHttpInfo (string area);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observations for a given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ZonesForecastZoneIdObservationsGetAsync (string zoneId, DateTime? start = null, DateTime? end = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observations for a given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ZonesForecastZoneIdObservationsGetAsyncWithHttpInfo (string zoneId, DateTime? start = null, DateTime? end = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations for a given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ZonesForecastZoneIdStationsGetAsync (string zoneId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of observation stations for a given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ZonesForecastZoneIdStationsGetAsyncWithHttpInfo (string zoneId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of zones
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ZonesGetAsync (List<string> id = null, List<string> area = null, List<string> region = null, List<string> type = null, string point = null, bool? includeGeometry = null, int? limit = null, DateTime? effective = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of zones
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ZonesGetAsyncWithHttpInfo (List<string> id = null, List<string> area = null, List<string> region = null, List<string> type = null, string point = null, bool? includeGeometry = null, int? limit = null, DateTime? effective = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of zones of a given type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ZonesTypeGetAsync (string type, List<string> id = null, List<string> area = null, List<string> region = null, List<string> type = null, string point = null, bool? includeGeometry = null, int? limit = null, DateTime? effective = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of zones of a given type
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ZonesTypeGetAsyncWithHttpInfo (string type, List<string> id = null, List<string> area = null, List<string> region = null, List<string> type = null, string point = null, bool? includeGeometry = null, int? limit = null, DateTime? effective = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current zone forecast for a given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="zoneId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ZonesTypeZoneIdForecastGetAsync (string type, string zoneId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the current zone forecast for a given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ZonesTypeZoneIdForecastGetAsyncWithHttpInfo (string type, string zoneId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="zoneId"></param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ZonesTypeZoneIdGetAsync (string type, string zoneId, DateTime? effective = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns metadata about a given zone
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="zoneId"></param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ZonesTypeZoneIdGetAsyncWithHttpInfo (string type, string zoneId, DateTime? effective = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Returns active alerts for the given area (state or marine area)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"></param>
        /// <returns></returns>
        public void AlertsActiveAreaAreaGet (string area)
        {
             AlertsActiveAreaAreaGetWithHttpInfo(area);
        }

        /// <summary>
        ///  Returns active alerts for the given area (state or marine area)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AlertsActiveAreaAreaGetWithHttpInfo (string area)
        {
            // verify the required parameter 'area' is set
            if (area == null)
                throw new ApiException(400, "Missing required parameter 'area' when calling DefaultApi->AlertsActiveAreaAreaGet");

            var localVarPath = "/alerts/active/area/{area}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (area != null) localVarPathParams.Add("area", this.Configuration.ApiClient.ParameterToString(area)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AlertsActiveAreaAreaGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns active alerts for the given area (state or marine area)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsActiveAreaAreaGetAsync (string area)
        {
             await AlertsActiveAreaAreaGetAsyncWithHttpInfo(area);

        }

        /// <summary>
        ///  Returns active alerts for the given area (state or marine area)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AlertsActiveAreaAreaGetAsyncWithHttpInfo (string area)
        {
            // verify the required parameter 'area' is set
            if (area == null)
                throw new ApiException(400, "Missing required parameter 'area' when calling DefaultApi->AlertsActiveAreaAreaGet");

            var localVarPath = "/alerts/active/area/{area}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (area != null) localVarPathParams.Add("area", this.Configuration.ApiClient.ParameterToString(area)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AlertsActiveAreaAreaGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns info on the number of active alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void AlertsActiveCountGet ()
        {
             AlertsActiveCountGetWithHttpInfo();
        }

        /// <summary>
        ///  Returns info on the number of active alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AlertsActiveCountGetWithHttpInfo ()
        {

            var localVarPath = "/alerts/active/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AlertsActiveCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns info on the number of active alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsActiveCountGetAsync ()
        {
             await AlertsActiveCountGetAsyncWithHttpInfo();

        }

        /// <summary>
        ///  Returns info on the number of active alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AlertsActiveCountGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/alerts/active/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AlertsActiveCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns all currently active alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="_event">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="regionType">Region type (land or marine)  This parameter is incompatible with the following parameters: area, point, region, zone (optional)</param>
        /// <param name="point">Point (latitude,longitude)  This parameter is incompatible with the following parameters: area, region, region_type, zone (optional)</param>
        /// <param name="region">Marine region code  This parameter is incompatible with the following parameters: area, point, region_type, zone (optional)</param>
        /// <param name="area">State/marine area code  This parameter is incompatible with the following parameters: point, region, region_type, zone (optional)</param>
        /// <param name="zone">Zone ID (forecast or county)  This parameter is incompatible with the following parameters: area, point, region, region_type (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns></returns>
        public void AlertsActiveGet (List<string> status = null, List<string> messageType = null, List<string> _event = null, List<string> code = null, string regionType = null, string point = null, List<string> region = null, List<string> area = null, List<string> zone = null, List<string> urgency = null, List<string> severity = null, List<string> certainty = null, int? limit = null)
        {
             AlertsActiveGetWithHttpInfo(status, messageType, _event, code, regionType, point, region, area, zone, urgency, severity, certainty, limit);
        }

        /// <summary>
        ///  Returns all currently active alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="_event">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="regionType">Region type (land or marine)  This parameter is incompatible with the following parameters: area, point, region, zone (optional)</param>
        /// <param name="point">Point (latitude,longitude)  This parameter is incompatible with the following parameters: area, region, region_type, zone (optional)</param>
        /// <param name="region">Marine region code  This parameter is incompatible with the following parameters: area, point, region_type, zone (optional)</param>
        /// <param name="area">State/marine area code  This parameter is incompatible with the following parameters: point, region, region_type, zone (optional)</param>
        /// <param name="zone">Zone ID (forecast or county)  This parameter is incompatible with the following parameters: area, point, region, region_type (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AlertsActiveGetWithHttpInfo (List<string> status = null, List<string> messageType = null, List<string> _event = null, List<string> code = null, string regionType = null, string point = null, List<string> region = null, List<string> area = null, List<string> zone = null, List<string> urgency = null, List<string> severity = null, List<string> certainty = null, int? limit = null)
        {

            var localVarPath = "/alerts/active";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "status", status)); // query parameter
            if (messageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "message_type", messageType)); // query parameter
            if (_event != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "event", _event)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "code", code)); // query parameter
            if (regionType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "region_type", regionType)); // query parameter
            if (point != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "point", point)); // query parameter
            if (region != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "region", region)); // query parameter
            if (area != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "area", area)); // query parameter
            if (zone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "zone", zone)); // query parameter
            if (urgency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "urgency", urgency)); // query parameter
            if (severity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "severity", severity)); // query parameter
            if (certainty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "certainty", certainty)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AlertsActiveGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns all currently active alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="_event">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="regionType">Region type (land or marine)  This parameter is incompatible with the following parameters: area, point, region, zone (optional)</param>
        /// <param name="point">Point (latitude,longitude)  This parameter is incompatible with the following parameters: area, region, region_type, zone (optional)</param>
        /// <param name="region">Marine region code  This parameter is incompatible with the following parameters: area, point, region_type, zone (optional)</param>
        /// <param name="area">State/marine area code  This parameter is incompatible with the following parameters: point, region, region_type, zone (optional)</param>
        /// <param name="zone">Zone ID (forecast or county)  This parameter is incompatible with the following parameters: area, point, region, region_type (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsActiveGetAsync (List<string> status = null, List<string> messageType = null, List<string> _event = null, List<string> code = null, string regionType = null, string point = null, List<string> region = null, List<string> area = null, List<string> zone = null, List<string> urgency = null, List<string> severity = null, List<string> certainty = null, int? limit = null)
        {
             await AlertsActiveGetAsyncWithHttpInfo(status, messageType, _event, code, regionType, point, region, area, zone, urgency, severity, certainty, limit);

        }

        /// <summary>
        ///  Returns all currently active alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="_event">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="regionType">Region type (land or marine)  This parameter is incompatible with the following parameters: area, point, region, zone (optional)</param>
        /// <param name="point">Point (latitude,longitude)  This parameter is incompatible with the following parameters: area, region, region_type, zone (optional)</param>
        /// <param name="region">Marine region code  This parameter is incompatible with the following parameters: area, point, region_type, zone (optional)</param>
        /// <param name="area">State/marine area code  This parameter is incompatible with the following parameters: point, region, region_type, zone (optional)</param>
        /// <param name="zone">Zone ID (forecast or county)  This parameter is incompatible with the following parameters: area, point, region, region_type (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AlertsActiveGetAsyncWithHttpInfo (List<string> status = null, List<string> messageType = null, List<string> _event = null, List<string> code = null, string regionType = null, string point = null, List<string> region = null, List<string> area = null, List<string> zone = null, List<string> urgency = null, List<string> severity = null, List<string> certainty = null, int? limit = null)
        {

            var localVarPath = "/alerts/active";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "status", status)); // query parameter
            if (messageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "message_type", messageType)); // query parameter
            if (_event != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "event", _event)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "code", code)); // query parameter
            if (regionType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "region_type", regionType)); // query parameter
            if (point != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "point", point)); // query parameter
            if (region != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "region", region)); // query parameter
            if (area != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "area", area)); // query parameter
            if (zone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "zone", zone)); // query parameter
            if (urgency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "urgency", urgency)); // query parameter
            if (severity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "severity", severity)); // query parameter
            if (certainty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "certainty", certainty)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AlertsActiveGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns active alerts for the given marine region
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region"></param>
        /// <returns></returns>
        public void AlertsActiveRegionRegionGet (string region)
        {
             AlertsActiveRegionRegionGetWithHttpInfo(region);
        }

        /// <summary>
        ///  Returns active alerts for the given marine region
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AlertsActiveRegionRegionGetWithHttpInfo (string region)
        {
            // verify the required parameter 'region' is set
            if (region == null)
                throw new ApiException(400, "Missing required parameter 'region' when calling DefaultApi->AlertsActiveRegionRegionGet");

            var localVarPath = "/alerts/active/region/{region}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (region != null) localVarPathParams.Add("region", this.Configuration.ApiClient.ParameterToString(region)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AlertsActiveRegionRegionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns active alerts for the given marine region
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsActiveRegionRegionGetAsync (string region)
        {
             await AlertsActiveRegionRegionGetAsyncWithHttpInfo(region);

        }

        /// <summary>
        ///  Returns active alerts for the given marine region
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="region"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AlertsActiveRegionRegionGetAsyncWithHttpInfo (string region)
        {
            // verify the required parameter 'region' is set
            if (region == null)
                throw new ApiException(400, "Missing required parameter 'region' when calling DefaultApi->AlertsActiveRegionRegionGet");

            var localVarPath = "/alerts/active/region/{region}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (region != null) localVarPathParams.Add("region", this.Configuration.ApiClient.ParameterToString(region)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AlertsActiveRegionRegionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns active alerts for the given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns></returns>
        public void AlertsActiveZoneZoneIdGet (string zoneId)
        {
             AlertsActiveZoneZoneIdGetWithHttpInfo(zoneId);
        }

        /// <summary>
        ///  Returns active alerts for the given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AlertsActiveZoneZoneIdGetWithHttpInfo (string zoneId)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->AlertsActiveZoneZoneIdGet");

            var localVarPath = "/alerts/active/zone/{zoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AlertsActiveZoneZoneIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns active alerts for the given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsActiveZoneZoneIdGetAsync (string zoneId)
        {
             await AlertsActiveZoneZoneIdGetAsyncWithHttpInfo(zoneId);

        }

        /// <summary>
        ///  Returns active alerts for the given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AlertsActiveZoneZoneIdGetAsyncWithHttpInfo (string zoneId)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->AlertsActiveZoneZoneIdGet");

            var localVarPath = "/alerts/active/zone/{zoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AlertsActiveZoneZoneIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns all alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">Active alerts (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="_event">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="regionType">Region type (land or marine)  This parameter is incompatible with the following parameters: area, point, region, zone (optional)</param>
        /// <param name="point">Point (latitude,longitude)  This parameter is incompatible with the following parameters: area, region, region_type, zone (optional)</param>
        /// <param name="region">Marine region code  This parameter is incompatible with the following parameters: area, point, region_type, zone (optional)</param>
        /// <param name="area">State/marine area code  This parameter is incompatible with the following parameters: point, region, region_type, zone (optional)</param>
        /// <param name="zone">Zone ID (forecast or county)  This parameter is incompatible with the following parameters: area, point, region, region_type (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <returns></returns>
        public void AlertsGet (bool? active = null, DateTime? start = null, DateTime? end = null, List<string> status = null, List<string> messageType = null, List<string> _event = null, List<string> code = null, string regionType = null, string point = null, List<string> region = null, List<string> area = null, List<string> zone = null, List<string> urgency = null, List<string> severity = null, List<string> certainty = null, int? limit = null, string cursor = null)
        {
             AlertsGetWithHttpInfo(active, start, end, status, messageType, _event, code, regionType, point, region, area, zone, urgency, severity, certainty, limit, cursor);
        }

        /// <summary>
        ///  Returns all alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">Active alerts (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="_event">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="regionType">Region type (land or marine)  This parameter is incompatible with the following parameters: area, point, region, zone (optional)</param>
        /// <param name="point">Point (latitude,longitude)  This parameter is incompatible with the following parameters: area, region, region_type, zone (optional)</param>
        /// <param name="region">Marine region code  This parameter is incompatible with the following parameters: area, point, region_type, zone (optional)</param>
        /// <param name="area">State/marine area code  This parameter is incompatible with the following parameters: point, region, region_type, zone (optional)</param>
        /// <param name="zone">Zone ID (forecast or county)  This parameter is incompatible with the following parameters: area, point, region, region_type (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AlertsGetWithHttpInfo (bool? active = null, DateTime? start = null, DateTime? end = null, List<string> status = null, List<string> messageType = null, List<string> _event = null, List<string> code = null, string regionType = null, string point = null, List<string> region = null, List<string> area = null, List<string> zone = null, List<string> urgency = null, List<string> severity = null, List<string> certainty = null, int? limit = null, string cursor = null)
        {

            var localVarPath = "/alerts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "status", status)); // query parameter
            if (messageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "message_type", messageType)); // query parameter
            if (_event != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "event", _event)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "code", code)); // query parameter
            if (regionType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "region_type", regionType)); // query parameter
            if (point != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "point", point)); // query parameter
            if (region != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "region", region)); // query parameter
            if (area != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "area", area)); // query parameter
            if (zone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "zone", zone)); // query parameter
            if (urgency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "urgency", urgency)); // query parameter
            if (severity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "severity", severity)); // query parameter
            if (certainty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "certainty", certainty)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AlertsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns all alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">Active alerts (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="_event">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="regionType">Region type (land or marine)  This parameter is incompatible with the following parameters: area, point, region, zone (optional)</param>
        /// <param name="point">Point (latitude,longitude)  This parameter is incompatible with the following parameters: area, region, region_type, zone (optional)</param>
        /// <param name="region">Marine region code  This parameter is incompatible with the following parameters: area, point, region_type, zone (optional)</param>
        /// <param name="area">State/marine area code  This parameter is incompatible with the following parameters: point, region, region_type, zone (optional)</param>
        /// <param name="zone">Zone ID (forecast or county)  This parameter is incompatible with the following parameters: area, point, region, region_type (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsGetAsync (bool? active = null, DateTime? start = null, DateTime? end = null, List<string> status = null, List<string> messageType = null, List<string> _event = null, List<string> code = null, string regionType = null, string point = null, List<string> region = null, List<string> area = null, List<string> zone = null, List<string> urgency = null, List<string> severity = null, List<string> certainty = null, int? limit = null, string cursor = null)
        {
             await AlertsGetAsyncWithHttpInfo(active, start, end, status, messageType, _event, code, regionType, point, region, area, zone, urgency, severity, certainty, limit, cursor);

        }

        /// <summary>
        ///  Returns all alerts
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="active">Active alerts (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="status">Status (actual, exercise, system, test, draft) (optional)</param>
        /// <param name="messageType">Message type (alert, update, cancel) (optional)</param>
        /// <param name="_event">Event name (optional)</param>
        /// <param name="code">Event code (optional)</param>
        /// <param name="regionType">Region type (land or marine)  This parameter is incompatible with the following parameters: area, point, region, zone (optional)</param>
        /// <param name="point">Point (latitude,longitude)  This parameter is incompatible with the following parameters: area, region, region_type, zone (optional)</param>
        /// <param name="region">Marine region code  This parameter is incompatible with the following parameters: area, point, region_type, zone (optional)</param>
        /// <param name="area">State/marine area code  This parameter is incompatible with the following parameters: point, region, region_type, zone (optional)</param>
        /// <param name="zone">Zone ID (forecast or county)  This parameter is incompatible with the following parameters: area, point, region, region_type (optional)</param>
        /// <param name="urgency">Urgency (immediate, expected, future, past, unknown) (optional)</param>
        /// <param name="severity">Severity (extreme, severe, moderate, minor, unknown) (optional)</param>
        /// <param name="certainty">Certainty (observed, likely, possible, unlikely, unknown) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="cursor">Pagination cursor (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AlertsGetAsyncWithHttpInfo (bool? active = null, DateTime? start = null, DateTime? end = null, List<string> status = null, List<string> messageType = null, List<string> _event = null, List<string> code = null, string regionType = null, string point = null, List<string> region = null, List<string> area = null, List<string> zone = null, List<string> urgency = null, List<string> severity = null, List<string> certainty = null, int? limit = null, string cursor = null)
        {

            var localVarPath = "/alerts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/atom+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (active != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "active", active)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "status", status)); // query parameter
            if (messageType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "message_type", messageType)); // query parameter
            if (_event != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "event", _event)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "code", code)); // query parameter
            if (regionType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "region_type", regionType)); // query parameter
            if (point != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "point", point)); // query parameter
            if (region != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "region", region)); // query parameter
            if (area != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "area", area)); // query parameter
            if (zone != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "zone", zone)); // query parameter
            if (urgency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "urgency", urgency)); // query parameter
            if (severity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "severity", severity)); // query parameter
            if (certainty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "certainty", certainty)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AlertsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a specific alert
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void AlertsIdGet (string id)
        {
             AlertsIdGetWithHttpInfo(id);
        }

        /// <summary>
        ///  Returns a specific alert
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AlertsIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->AlertsIdGet");

            var localVarPath = "/alerts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/cap+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AlertsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a specific alert
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsIdGetAsync (string id)
        {
             await AlertsIdGetAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  Returns a specific alert
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AlertsIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->AlertsIdGet");

            var localVarPath = "/alerts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/cap+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AlertsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of alert types
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void AlertsTypesGet ()
        {
             AlertsTypesGetWithHttpInfo();
        }

        /// <summary>
        ///  Returns a list of alert types
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AlertsTypesGetWithHttpInfo ()
        {

            var localVarPath = "/alerts/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AlertsTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of alert types
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsTypesGetAsync ()
        {
             await AlertsTypesGetAsyncWithHttpInfo();

        }

        /// <summary>
        ///  Returns a list of alert types
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AlertsTypesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/alerts/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AlertsTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns glossary terms
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void GlossaryGet ()
        {
             GlossaryGetWithHttpInfo();
        }

        /// <summary>
        ///  Returns glossary terms
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GlossaryGetWithHttpInfo ()
        {

            var localVarPath = "/glossary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GlossaryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns glossary terms
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GlossaryGetAsync ()
        {
             await GlossaryGetAsyncWithHttpInfo();

        }

        /// <summary>
        ///  Returns glossary terms
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GlossaryGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/glossary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GlossaryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a textual forecast for a 2.5km grid area
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info):  * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional, default to us)</param>
        /// <returns></returns>
        public void GridpointsWfoXyForecastGet (string wfo, int? x, int? y, List<string> featureFlags = null, string units = null)
        {
             GridpointsWfoXyForecastGetWithHttpInfo(wfo, x, y, featureFlags, units);
        }

        /// <summary>
        ///  Returns a textual forecast for a 2.5km grid area
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info):  * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional, default to us)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GridpointsWfoXyForecastGetWithHttpInfo (string wfo, int? x, int? y, List<string> featureFlags = null, string units = null)
        {
            // verify the required parameter 'wfo' is set
            if (wfo == null)
                throw new ApiException(400, "Missing required parameter 'wfo' when calling DefaultApi->GridpointsWfoXyForecastGet");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling DefaultApi->GridpointsWfoXyForecastGet");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling DefaultApi->GridpointsWfoXyForecastGet");

            var localVarPath = "/gridpoints/{wfo}/{x},{y}/forecast";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.dwml+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wfo != null) localVarPathParams.Add("wfo", this.Configuration.ApiClient.ParameterToString(wfo)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (units != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "units", units)); // query parameter
            if (featureFlags != null) localVarHeaderParams.Add("Feature-Flags", this.Configuration.ApiClient.ParameterToString(featureFlags)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridpointsWfoXyForecastGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a textual forecast for a 2.5km grid area
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info):  * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional, default to us)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GridpointsWfoXyForecastGetAsync (string wfo, int? x, int? y, List<string> featureFlags = null, string units = null)
        {
             await GridpointsWfoXyForecastGetAsyncWithHttpInfo(wfo, x, y, featureFlags, units);

        }

        /// <summary>
        ///  Returns a textual forecast for a 2.5km grid area
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info):  * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional, default to us)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GridpointsWfoXyForecastGetAsyncWithHttpInfo (string wfo, int? x, int? y, List<string> featureFlags = null, string units = null)
        {
            // verify the required parameter 'wfo' is set
            if (wfo == null)
                throw new ApiException(400, "Missing required parameter 'wfo' when calling DefaultApi->GridpointsWfoXyForecastGet");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling DefaultApi->GridpointsWfoXyForecastGet");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling DefaultApi->GridpointsWfoXyForecastGet");

            var localVarPath = "/gridpoints/{wfo}/{x},{y}/forecast";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.dwml+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wfo != null) localVarPathParams.Add("wfo", this.Configuration.ApiClient.ParameterToString(wfo)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (units != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "units", units)); // query parameter
            if (featureFlags != null) localVarHeaderParams.Add("Feature-Flags", this.Configuration.ApiClient.ParameterToString(featureFlags)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridpointsWfoXyForecastGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a textual hourly forecast for a 2.5km grid area
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info):  * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional, default to us)</param>
        /// <returns></returns>
        public void GridpointsWfoXyForecastHourlyGet (string wfo, int? x, int? y, List<string> featureFlags = null, string units = null)
        {
             GridpointsWfoXyForecastHourlyGetWithHttpInfo(wfo, x, y, featureFlags, units);
        }

        /// <summary>
        ///  Returns a textual hourly forecast for a 2.5km grid area
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info):  * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional, default to us)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GridpointsWfoXyForecastHourlyGetWithHttpInfo (string wfo, int? x, int? y, List<string> featureFlags = null, string units = null)
        {
            // verify the required parameter 'wfo' is set
            if (wfo == null)
                throw new ApiException(400, "Missing required parameter 'wfo' when calling DefaultApi->GridpointsWfoXyForecastHourlyGet");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling DefaultApi->GridpointsWfoXyForecastHourlyGet");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling DefaultApi->GridpointsWfoXyForecastHourlyGet");

            var localVarPath = "/gridpoints/{wfo}/{x},{y}/forecast/hourly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.dwml+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wfo != null) localVarPathParams.Add("wfo", this.Configuration.ApiClient.ParameterToString(wfo)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (units != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "units", units)); // query parameter
            if (featureFlags != null) localVarHeaderParams.Add("Feature-Flags", this.Configuration.ApiClient.ParameterToString(featureFlags)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridpointsWfoXyForecastHourlyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a textual hourly forecast for a 2.5km grid area
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info):  * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional, default to us)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GridpointsWfoXyForecastHourlyGetAsync (string wfo, int? x, int? y, List<string> featureFlags = null, string units = null)
        {
             await GridpointsWfoXyForecastHourlyGetAsyncWithHttpInfo(wfo, x, y, featureFlags, units);

        }

        /// <summary>
        ///  Returns a textual hourly forecast for a 2.5km grid area
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="featureFlags">Enable future and experimental features (see documentation for more info):  * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue (optional)</param>
        /// <param name="units">Use US customary or SI (metric) units in textual output (optional, default to us)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GridpointsWfoXyForecastHourlyGetAsyncWithHttpInfo (string wfo, int? x, int? y, List<string> featureFlags = null, string units = null)
        {
            // verify the required parameter 'wfo' is set
            if (wfo == null)
                throw new ApiException(400, "Missing required parameter 'wfo' when calling DefaultApi->GridpointsWfoXyForecastHourlyGet");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling DefaultApi->GridpointsWfoXyForecastHourlyGet");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling DefaultApi->GridpointsWfoXyForecastHourlyGet");

            var localVarPath = "/gridpoints/{wfo}/{x},{y}/forecast/hourly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.dwml+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wfo != null) localVarPathParams.Add("wfo", this.Configuration.ApiClient.ParameterToString(wfo)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter
            if (units != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "units", units)); // query parameter
            if (featureFlags != null) localVarHeaderParams.Add("Feature-Flags", this.Configuration.ApiClient.ParameterToString(featureFlags)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridpointsWfoXyForecastHourlyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns raw numerical forecast data for a 2.5km grid area
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns></returns>
        public void GridpointsWfoXyGet (string wfo, int? x, int? y)
        {
             GridpointsWfoXyGetWithHttpInfo(wfo, x, y);
        }

        /// <summary>
        ///  Returns raw numerical forecast data for a 2.5km grid area
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GridpointsWfoXyGetWithHttpInfo (string wfo, int? x, int? y)
        {
            // verify the required parameter 'wfo' is set
            if (wfo == null)
                throw new ApiException(400, "Missing required parameter 'wfo' when calling DefaultApi->GridpointsWfoXyGet");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling DefaultApi->GridpointsWfoXyGet");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling DefaultApi->GridpointsWfoXyGet");

            var localVarPath = "/gridpoints/{wfo}/{x},{y}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wfo != null) localVarPathParams.Add("wfo", this.Configuration.ApiClient.ParameterToString(wfo)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridpointsWfoXyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns raw numerical forecast data for a 2.5km grid area
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GridpointsWfoXyGetAsync (string wfo, int? x, int? y)
        {
             await GridpointsWfoXyGetAsyncWithHttpInfo(wfo, x, y);

        }

        /// <summary>
        ///  Returns raw numerical forecast data for a 2.5km grid area
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GridpointsWfoXyGetAsyncWithHttpInfo (string wfo, int? x, int? y)
        {
            // verify the required parameter 'wfo' is set
            if (wfo == null)
                throw new ApiException(400, "Missing required parameter 'wfo' when calling DefaultApi->GridpointsWfoXyGet");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling DefaultApi->GridpointsWfoXyGet");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling DefaultApi->GridpointsWfoXyGet");

            var localVarPath = "/gridpoints/{wfo}/{x},{y}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wfo != null) localVarPathParams.Add("wfo", this.Configuration.ApiClient.ParameterToString(wfo)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridpointsWfoXyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of observation stations usable for a given 2.5km grid area
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns></returns>
        public void GridpointsWfoXyStationsGet (string wfo, int? x, int? y)
        {
             GridpointsWfoXyStationsGetWithHttpInfo(wfo, x, y);
        }

        /// <summary>
        ///  Returns a list of observation stations usable for a given 2.5km grid area
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GridpointsWfoXyStationsGetWithHttpInfo (string wfo, int? x, int? y)
        {
            // verify the required parameter 'wfo' is set
            if (wfo == null)
                throw new ApiException(400, "Missing required parameter 'wfo' when calling DefaultApi->GridpointsWfoXyStationsGet");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling DefaultApi->GridpointsWfoXyStationsGet");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling DefaultApi->GridpointsWfoXyStationsGet");

            var localVarPath = "/gridpoints/{wfo}/{x},{y}/stations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wfo != null) localVarPathParams.Add("wfo", this.Configuration.ApiClient.ParameterToString(wfo)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridpointsWfoXyStationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of observation stations usable for a given 2.5km grid area
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GridpointsWfoXyStationsGetAsync (string wfo, int? x, int? y)
        {
             await GridpointsWfoXyStationsGetAsyncWithHttpInfo(wfo, x, y);

        }

        /// <summary>
        ///  Returns a list of observation stations usable for a given 2.5km grid area
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wfo"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GridpointsWfoXyStationsGetAsyncWithHttpInfo (string wfo, int? x, int? y)
        {
            // verify the required parameter 'wfo' is set
            if (wfo == null)
                throw new ApiException(400, "Missing required parameter 'wfo' when calling DefaultApi->GridpointsWfoXyStationsGet");
            // verify the required parameter 'x' is set
            if (x == null)
                throw new ApiException(400, "Missing required parameter 'x' when calling DefaultApi->GridpointsWfoXyStationsGet");
            // verify the required parameter 'y' is set
            if (y == null)
                throw new ApiException(400, "Missing required parameter 'y' when calling DefaultApi->GridpointsWfoXyStationsGet");

            var localVarPath = "/gridpoints/{wfo}/{x},{y}/stations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wfo != null) localVarPathParams.Add("wfo", this.Configuration.ApiClient.ParameterToString(wfo)); // path parameter
            if (x != null) localVarPathParams.Add("x", this.Configuration.ApiClient.ParameterToString(x)); // path parameter
            if (y != null) localVarPathParams.Add("y", this.Configuration.ApiClient.ParameterToString(y)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GridpointsWfoXyStationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of icon codes and textual descriptions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void IconsGet ()
        {
             IconsGetWithHttpInfo();
        }

        /// <summary>
        ///  Returns a list of icon codes and textual descriptions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IconsGetWithHttpInfo ()
        {

            var localVarPath = "/icons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IconsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of icon codes and textual descriptions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IconsGetAsync ()
        {
             await IconsGetAsyncWithHttpInfo();

        }

        /// <summary>
        ///  Returns a list of icon codes and textual descriptions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IconsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/icons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IconsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a forecast icon
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set"></param>
        /// <param name="timeOfDay"></param>
        /// <param name="first"></param>
        /// <param name="second"></param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <returns></returns>
        public void IconsSetTimeOfDayFirstSecondGet (string set, string timeOfDay, string first, string second, Size size = null, int? fontsize = null)
        {
             IconsSetTimeOfDayFirstSecondGetWithHttpInfo(set, timeOfDay, first, second, size, fontsize);
        }

        /// <summary>
        ///  Returns a forecast icon
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set"></param>
        /// <param name="timeOfDay"></param>
        /// <param name="first"></param>
        /// <param name="second"></param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IconsSetTimeOfDayFirstSecondGetWithHttpInfo (string set, string timeOfDay, string first, string second, Size size = null, int? fontsize = null)
        {
            // verify the required parameter 'set' is set
            if (set == null)
                throw new ApiException(400, "Missing required parameter 'set' when calling DefaultApi->IconsSetTimeOfDayFirstSecondGet");
            // verify the required parameter 'timeOfDay' is set
            if (timeOfDay == null)
                throw new ApiException(400, "Missing required parameter 'timeOfDay' when calling DefaultApi->IconsSetTimeOfDayFirstSecondGet");
            // verify the required parameter 'first' is set
            if (first == null)
                throw new ApiException(400, "Missing required parameter 'first' when calling DefaultApi->IconsSetTimeOfDayFirstSecondGet");
            // verify the required parameter 'second' is set
            if (second == null)
                throw new ApiException(400, "Missing required parameter 'second' when calling DefaultApi->IconsSetTimeOfDayFirstSecondGet");

            var localVarPath = "/icons/{set}/{timeOfDay}/{first}/{second}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (set != null) localVarPathParams.Add("set", this.Configuration.ApiClient.ParameterToString(set)); // path parameter
            if (timeOfDay != null) localVarPathParams.Add("timeOfDay", this.Configuration.ApiClient.ParameterToString(timeOfDay)); // path parameter
            if (first != null) localVarPathParams.Add("first", this.Configuration.ApiClient.ParameterToString(first)); // path parameter
            if (second != null) localVarPathParams.Add("second", this.Configuration.ApiClient.ParameterToString(second)); // path parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (fontsize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fontsize", fontsize)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IconsSetTimeOfDayFirstSecondGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a forecast icon
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set"></param>
        /// <param name="timeOfDay"></param>
        /// <param name="first"></param>
        /// <param name="second"></param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IconsSetTimeOfDayFirstSecondGetAsync (string set, string timeOfDay, string first, string second, Size size = null, int? fontsize = null)
        {
             await IconsSetTimeOfDayFirstSecondGetAsyncWithHttpInfo(set, timeOfDay, first, second, size, fontsize);

        }

        /// <summary>
        ///  Returns a forecast icon
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="set"></param>
        /// <param name="timeOfDay"></param>
        /// <param name="first"></param>
        /// <param name="second"></param>
        /// <param name="size">Font size (optional)</param>
        /// <param name="fontsize">Font size (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IconsSetTimeOfDayFirstSecondGetAsyncWithHttpInfo (string set, string timeOfDay, string first, string second, Size size = null, int? fontsize = null)
        {
            // verify the required parameter 'set' is set
            if (set == null)
                throw new ApiException(400, "Missing required parameter 'set' when calling DefaultApi->IconsSetTimeOfDayFirstSecondGet");
            // verify the required parameter 'timeOfDay' is set
            if (timeOfDay == null)
                throw new ApiException(400, "Missing required parameter 'timeOfDay' when calling DefaultApi->IconsSetTimeOfDayFirstSecondGet");
            // verify the required parameter 'first' is set
            if (first == null)
                throw new ApiException(400, "Missing required parameter 'first' when calling DefaultApi->IconsSetTimeOfDayFirstSecondGet");
            // verify the required parameter 'second' is set
            if (second == null)
                throw new ApiException(400, "Missing required parameter 'second' when calling DefaultApi->IconsSetTimeOfDayFirstSecondGet");

            var localVarPath = "/icons/{set}/{timeOfDay}/{first}/{second}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (set != null) localVarPathParams.Add("set", this.Configuration.ApiClient.ParameterToString(set)); // path parameter
            if (timeOfDay != null) localVarPathParams.Add("timeOfDay", this.Configuration.ApiClient.ParameterToString(timeOfDay)); // path parameter
            if (first != null) localVarPathParams.Add("first", this.Configuration.ApiClient.ParameterToString(first)); // path parameter
            if (second != null) localVarPathParams.Add("second", this.Configuration.ApiClient.ParameterToString(second)); // path parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (fontsize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fontsize", fontsize)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IconsSetTimeOfDayFirstSecondGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns metadata about a NWS forecast office
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <returns></returns>
        public void OfficesOfficeIdGet (string officeId)
        {
             OfficesOfficeIdGetWithHttpInfo(officeId);
        }

        /// <summary>
        ///  Returns metadata about a NWS forecast office
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OfficesOfficeIdGetWithHttpInfo (string officeId)
        {
            // verify the required parameter 'officeId' is set
            if (officeId == null)
                throw new ApiException(400, "Missing required parameter 'officeId' when calling DefaultApi->OfficesOfficeIdGet");

            var localVarPath = "/offices/{officeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (officeId != null) localVarPathParams.Add("officeId", this.Configuration.ApiClient.ParameterToString(officeId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OfficesOfficeIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns metadata about a NWS forecast office
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OfficesOfficeIdGetAsync (string officeId)
        {
             await OfficesOfficeIdGetAsyncWithHttpInfo(officeId);

        }

        /// <summary>
        ///  Returns metadata about a NWS forecast office
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OfficesOfficeIdGetAsyncWithHttpInfo (string officeId)
        {
            // verify the required parameter 'officeId' is set
            if (officeId == null)
                throw new ApiException(400, "Missing required parameter 'officeId' when calling DefaultApi->OfficesOfficeIdGet");

            var localVarPath = "/offices/{officeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (officeId != null) localVarPathParams.Add("officeId", this.Configuration.ApiClient.ParameterToString(officeId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OfficesOfficeIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of news headlines for a given NWS office
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <returns></returns>
        public void OfficesOfficeIdHeadlinesGet (string officeId)
        {
             OfficesOfficeIdHeadlinesGetWithHttpInfo(officeId);
        }

        /// <summary>
        ///  Returns a list of news headlines for a given NWS office
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OfficesOfficeIdHeadlinesGetWithHttpInfo (string officeId)
        {
            // verify the required parameter 'officeId' is set
            if (officeId == null)
                throw new ApiException(400, "Missing required parameter 'officeId' when calling DefaultApi->OfficesOfficeIdHeadlinesGet");

            var localVarPath = "/offices/{officeId}/headlines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (officeId != null) localVarPathParams.Add("officeId", this.Configuration.ApiClient.ParameterToString(officeId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OfficesOfficeIdHeadlinesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of news headlines for a given NWS office
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OfficesOfficeIdHeadlinesGetAsync (string officeId)
        {
             await OfficesOfficeIdHeadlinesGetAsyncWithHttpInfo(officeId);

        }

        /// <summary>
        ///  Returns a list of news headlines for a given NWS office
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OfficesOfficeIdHeadlinesGetAsyncWithHttpInfo (string officeId)
        {
            // verify the required parameter 'officeId' is set
            if (officeId == null)
                throw new ApiException(400, "Missing required parameter 'officeId' when calling DefaultApi->OfficesOfficeIdHeadlinesGet");

            var localVarPath = "/offices/{officeId}/headlines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (officeId != null) localVarPathParams.Add("officeId", this.Configuration.ApiClient.ParameterToString(officeId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OfficesOfficeIdHeadlinesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a specific news headline for a given NWS office
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <param name="headlineId"></param>
        /// <returns></returns>
        public void OfficesOfficeIdHeadlinesHeadlineIdGet (string officeId, string headlineId)
        {
             OfficesOfficeIdHeadlinesHeadlineIdGetWithHttpInfo(officeId, headlineId);
        }

        /// <summary>
        ///  Returns a specific news headline for a given NWS office
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <param name="headlineId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> OfficesOfficeIdHeadlinesHeadlineIdGetWithHttpInfo (string officeId, string headlineId)
        {
            // verify the required parameter 'officeId' is set
            if (officeId == null)
                throw new ApiException(400, "Missing required parameter 'officeId' when calling DefaultApi->OfficesOfficeIdHeadlinesHeadlineIdGet");
            // verify the required parameter 'headlineId' is set
            if (headlineId == null)
                throw new ApiException(400, "Missing required parameter 'headlineId' when calling DefaultApi->OfficesOfficeIdHeadlinesHeadlineIdGet");

            var localVarPath = "/offices/{officeId}/headlines/{headlineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (officeId != null) localVarPathParams.Add("officeId", this.Configuration.ApiClient.ParameterToString(officeId)); // path parameter
            if (headlineId != null) localVarPathParams.Add("headlineId", this.Configuration.ApiClient.ParameterToString(headlineId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OfficesOfficeIdHeadlinesHeadlineIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a specific news headline for a given NWS office
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <param name="headlineId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task OfficesOfficeIdHeadlinesHeadlineIdGetAsync (string officeId, string headlineId)
        {
             await OfficesOfficeIdHeadlinesHeadlineIdGetAsyncWithHttpInfo(officeId, headlineId);

        }

        /// <summary>
        ///  Returns a specific news headline for a given NWS office
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="officeId"></param>
        /// <param name="headlineId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> OfficesOfficeIdHeadlinesHeadlineIdGetAsyncWithHttpInfo (string officeId, string headlineId)
        {
            // verify the required parameter 'officeId' is set
            if (officeId == null)
                throw new ApiException(400, "Missing required parameter 'officeId' when calling DefaultApi->OfficesOfficeIdHeadlinesHeadlineIdGet");
            // verify the required parameter 'headlineId' is set
            if (headlineId == null)
                throw new ApiException(400, "Missing required parameter 'headlineId' when calling DefaultApi->OfficesOfficeIdHeadlinesHeadlineIdGet");

            var localVarPath = "/offices/{officeId}/headlines/{headlineId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (officeId != null) localVarPathParams.Add("officeId", this.Configuration.ApiClient.ParameterToString(officeId)); // path parameter
            if (headlineId != null) localVarPathParams.Add("headlineId", this.Configuration.ApiClient.ParameterToString(headlineId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OfficesOfficeIdHeadlinesHeadlineIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a textual forecast for a given point
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns></returns>
        public void PointsPointForecastGet (string point)
        {
             PointsPointForecastGetWithHttpInfo(point);
        }

        /// <summary>
        ///  Returns a textual forecast for a given point
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PointsPointForecastGetWithHttpInfo (string point)
        {
            // verify the required parameter 'point' is set
            if (point == null)
                throw new ApiException(400, "Missing required parameter 'point' when calling DefaultApi->PointsPointForecastGet");

            var localVarPath = "/points/{point}/forecast";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.dwml+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (point != null) localVarPathParams.Add("point", this.Configuration.ApiClient.ParameterToString(point)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PointsPointForecastGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a textual forecast for a given point
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PointsPointForecastGetAsync (string point)
        {
             await PointsPointForecastGetAsyncWithHttpInfo(point);

        }

        /// <summary>
        ///  Returns a textual forecast for a given point
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PointsPointForecastGetAsyncWithHttpInfo (string point)
        {
            // verify the required parameter 'point' is set
            if (point == null)
                throw new ApiException(400, "Missing required parameter 'point' when calling DefaultApi->PointsPointForecastGet");

            var localVarPath = "/points/{point}/forecast";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.dwml+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (point != null) localVarPathParams.Add("point", this.Configuration.ApiClient.ParameterToString(point)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PointsPointForecastGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a textual hourly forecast for a given point
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns></returns>
        public void PointsPointForecastHourlyGet (string point)
        {
             PointsPointForecastHourlyGetWithHttpInfo(point);
        }

        /// <summary>
        ///  Returns a textual hourly forecast for a given point
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PointsPointForecastHourlyGetWithHttpInfo (string point)
        {
            // verify the required parameter 'point' is set
            if (point == null)
                throw new ApiException(400, "Missing required parameter 'point' when calling DefaultApi->PointsPointForecastHourlyGet");

            var localVarPath = "/points/{point}/forecast/hourly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.dwml+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (point != null) localVarPathParams.Add("point", this.Configuration.ApiClient.ParameterToString(point)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PointsPointForecastHourlyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a textual hourly forecast for a given point
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PointsPointForecastHourlyGetAsync (string point)
        {
             await PointsPointForecastHourlyGetAsyncWithHttpInfo(point);

        }

        /// <summary>
        ///  Returns a textual hourly forecast for a given point
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PointsPointForecastHourlyGetAsyncWithHttpInfo (string point)
        {
            // verify the required parameter 'point' is set
            if (point == null)
                throw new ApiException(400, "Missing required parameter 'point' when calling DefaultApi->PointsPointForecastHourlyGet");

            var localVarPath = "/points/{point}/forecast/hourly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.dwml+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (point != null) localVarPathParams.Add("point", this.Configuration.ApiClient.ParameterToString(point)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PointsPointForecastHourlyGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns metadata about a given latitude/longitude point
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns></returns>
        public void PointsPointGet (string point)
        {
             PointsPointGetWithHttpInfo(point);
        }

        /// <summary>
        ///  Returns metadata about a given latitude/longitude point
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PointsPointGetWithHttpInfo (string point)
        {
            // verify the required parameter 'point' is set
            if (point == null)
                throw new ApiException(400, "Missing required parameter 'point' when calling DefaultApi->PointsPointGet");

            var localVarPath = "/points/{point}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (point != null) localVarPathParams.Add("point", this.Configuration.ApiClient.ParameterToString(point)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PointsPointGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns metadata about a given latitude/longitude point
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PointsPointGetAsync (string point)
        {
             await PointsPointGetAsyncWithHttpInfo(point);

        }

        /// <summary>
        ///  Returns metadata about a given latitude/longitude point
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PointsPointGetAsyncWithHttpInfo (string point)
        {
            // verify the required parameter 'point' is set
            if (point == null)
                throw new ApiException(400, "Missing required parameter 'point' when calling DefaultApi->PointsPointGet");

            var localVarPath = "/points/{point}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (point != null) localVarPathParams.Add("point", this.Configuration.ApiClient.ParameterToString(point)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PointsPointGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of observation stations for a given point
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns></returns>
        public void PointsPointStationsGet (string point)
        {
             PointsPointStationsGetWithHttpInfo(point);
        }

        /// <summary>
        ///  Returns a list of observation stations for a given point
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PointsPointStationsGetWithHttpInfo (string point)
        {
            // verify the required parameter 'point' is set
            if (point == null)
                throw new ApiException(400, "Missing required parameter 'point' when calling DefaultApi->PointsPointStationsGet");

            var localVarPath = "/points/{point}/stations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (point != null) localVarPathParams.Add("point", this.Configuration.ApiClient.ParameterToString(point)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PointsPointStationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of observation stations for a given point
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PointsPointStationsGetAsync (string point)
        {
             await PointsPointStationsGetAsyncWithHttpInfo(point);

        }

        /// <summary>
        ///  Returns a list of observation stations for a given point
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="point"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PointsPointStationsGetAsyncWithHttpInfo (string point)
        {
            // verify the required parameter 'point' is set
            if (point == null)
                throw new ApiException(400, "Missing required parameter 'point' when calling DefaultApi->PointsPointStationsGet");

            var localVarPath = "/points/{point}/stations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (point != null) localVarPathParams.Add("point", this.Configuration.ApiClient.ParameterToString(point)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PointsPointStationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of text products
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location id (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="office">Issuing office (optional)</param>
        /// <param name="wmoid">WMO id code (optional)</param>
        /// <param name="type">Product code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns></returns>
        public void ProductsGet (List<string> location = null, DateTime? start = null, DateTime? end = null, List<string> office = null, List<string> wmoid = null, List<string> type = null, int? limit = null)
        {
             ProductsGetWithHttpInfo(location, start, end, office, wmoid, type, limit);
        }

        /// <summary>
        ///  Returns a list of text products
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location id (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="office">Issuing office (optional)</param>
        /// <param name="wmoid">WMO id code (optional)</param>
        /// <param name="type">Product code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProductsGetWithHttpInfo (List<string> location = null, DateTime? start = null, DateTime? end = null, List<string> office = null, List<string> wmoid = null, List<string> type = null, int? limit = null)
        {

            var localVarPath = "/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (location != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "location", location)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (office != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "office", office)); // query parameter
            if (wmoid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "wmoid", wmoid)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "type", type)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of text products
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location id (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="office">Issuing office (optional)</param>
        /// <param name="wmoid">WMO id code (optional)</param>
        /// <param name="type">Product code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductsGetAsync (List<string> location = null, DateTime? start = null, DateTime? end = null, List<string> office = null, List<string> wmoid = null, List<string> type = null, int? limit = null)
        {
             await ProductsGetAsyncWithHttpInfo(location, start, end, office, wmoid, type, limit);

        }

        /// <summary>
        ///  Returns a list of text products
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location id (optional)</param>
        /// <param name="start">Start time (optional)</param>
        /// <param name="end">End time (optional)</param>
        /// <param name="office">Issuing office (optional)</param>
        /// <param name="wmoid">WMO id code (optional)</param>
        /// <param name="type">Product code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProductsGetAsyncWithHttpInfo (List<string> location = null, DateTime? start = null, DateTime? end = null, List<string> office = null, List<string> wmoid = null, List<string> type = null, int? limit = null)
        {

            var localVarPath = "/products";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (location != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "location", location)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (office != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "office", office)); // query parameter
            if (wmoid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "wmoid", wmoid)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "type", type)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of valid text product issuance locations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ProductsLocationsGet ()
        {
             ProductsLocationsGetWithHttpInfo();
        }

        /// <summary>
        ///  Returns a list of valid text product issuance locations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProductsLocationsGetWithHttpInfo ()
        {

            var localVarPath = "/products/locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsLocationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of valid text product issuance locations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductsLocationsGetAsync ()
        {
             await ProductsLocationsGetAsyncWithHttpInfo();

        }

        /// <summary>
        ///  Returns a list of valid text product issuance locations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProductsLocationsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/products/locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsLocationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of valid text product types for a given issuance location
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <returns></returns>
        public void ProductsLocationsLocationIdTypesGet (string locationId)
        {
             ProductsLocationsLocationIdTypesGetWithHttpInfo(locationId);
        }

        /// <summary>
        ///  Returns a list of valid text product types for a given issuance location
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProductsLocationsLocationIdTypesGetWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling DefaultApi->ProductsLocationsLocationIdTypesGet");

            var localVarPath = "/products/locations/{locationId}/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsLocationsLocationIdTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of valid text product types for a given issuance location
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductsLocationsLocationIdTypesGetAsync (string locationId)
        {
             await ProductsLocationsLocationIdTypesGetAsyncWithHttpInfo(locationId);

        }

        /// <summary>
        ///  Returns a list of valid text product types for a given issuance location
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProductsLocationsLocationIdTypesGetAsyncWithHttpInfo (string locationId)
        {
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling DefaultApi->ProductsLocationsLocationIdTypesGet");

            var localVarPath = "/products/locations/{locationId}/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsLocationsLocationIdTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a specific text product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns></returns>
        public void ProductsProductIdGet (string productId)
        {
             ProductsProductIdGetWithHttpInfo(productId);
        }

        /// <summary>
        ///  Returns a specific text product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProductsProductIdGetWithHttpInfo (string productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling DefaultApi->ProductsProductIdGet");

            var localVarPath = "/products/{productId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsProductIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a specific text product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductsProductIdGetAsync (string productId)
        {
             await ProductsProductIdGetAsyncWithHttpInfo(productId);

        }

        /// <summary>
        ///  Returns a specific text product
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProductsProductIdGetAsyncWithHttpInfo (string productId)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
                throw new ApiException(400, "Missing required parameter 'productId' when calling DefaultApi->ProductsProductIdGet");

            var localVarPath = "/products/{productId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (productId != null) localVarPathParams.Add("productId", this.Configuration.ApiClient.ParameterToString(productId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsProductIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of valid text product types and codes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void ProductsTypesGet ()
        {
             ProductsTypesGetWithHttpInfo();
        }

        /// <summary>
        ///  Returns a list of valid text product types and codes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProductsTypesGetWithHttpInfo ()
        {

            var localVarPath = "/products/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of valid text product types and codes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductsTypesGetAsync ()
        {
             await ProductsTypesGetAsyncWithHttpInfo();

        }

        /// <summary>
        ///  Returns a list of valid text product types and codes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProductsTypesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/products/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsTypesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of text products of a given type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <returns></returns>
        public void ProductsTypesTypeIdGet (string typeId)
        {
             ProductsTypesTypeIdGetWithHttpInfo(typeId);
        }

        /// <summary>
        ///  Returns a list of text products of a given type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProductsTypesTypeIdGetWithHttpInfo (string typeId)
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
                throw new ApiException(400, "Missing required parameter 'typeId' when calling DefaultApi->ProductsTypesTypeIdGet");

            var localVarPath = "/products/types/{typeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (typeId != null) localVarPathParams.Add("typeId", this.Configuration.ApiClient.ParameterToString(typeId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsTypesTypeIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of text products of a given type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductsTypesTypeIdGetAsync (string typeId)
        {
             await ProductsTypesTypeIdGetAsyncWithHttpInfo(typeId);

        }

        /// <summary>
        ///  Returns a list of text products of a given type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProductsTypesTypeIdGetAsyncWithHttpInfo (string typeId)
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
                throw new ApiException(400, "Missing required parameter 'typeId' when calling DefaultApi->ProductsTypesTypeIdGet");

            var localVarPath = "/products/types/{typeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (typeId != null) localVarPathParams.Add("typeId", this.Configuration.ApiClient.ParameterToString(typeId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsTypesTypeIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of valid text product issuance locations for a given product type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <returns></returns>
        public void ProductsTypesTypeIdLocationsGet (string typeId)
        {
             ProductsTypesTypeIdLocationsGetWithHttpInfo(typeId);
        }

        /// <summary>
        ///  Returns a list of valid text product issuance locations for a given product type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProductsTypesTypeIdLocationsGetWithHttpInfo (string typeId)
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
                throw new ApiException(400, "Missing required parameter 'typeId' when calling DefaultApi->ProductsTypesTypeIdLocationsGet");

            var localVarPath = "/products/types/{typeId}/locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (typeId != null) localVarPathParams.Add("typeId", this.Configuration.ApiClient.ParameterToString(typeId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsTypesTypeIdLocationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of valid text product issuance locations for a given product type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductsTypesTypeIdLocationsGetAsync (string typeId)
        {
             await ProductsTypesTypeIdLocationsGetAsyncWithHttpInfo(typeId);

        }

        /// <summary>
        ///  Returns a list of valid text product issuance locations for a given product type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProductsTypesTypeIdLocationsGetAsyncWithHttpInfo (string typeId)
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
                throw new ApiException(400, "Missing required parameter 'typeId' when calling DefaultApi->ProductsTypesTypeIdLocationsGet");

            var localVarPath = "/products/types/{typeId}/locations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (typeId != null) localVarPathParams.Add("typeId", this.Configuration.ApiClient.ParameterToString(typeId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsTypesTypeIdLocationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of text products of a given type for a given issuance location
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <param name="locationId"></param>
        /// <returns></returns>
        public void ProductsTypesTypeIdLocationsLocationIdGet (string typeId, string locationId)
        {
             ProductsTypesTypeIdLocationsLocationIdGetWithHttpInfo(typeId, locationId);
        }

        /// <summary>
        ///  Returns a list of text products of a given type for a given issuance location
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <param name="locationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ProductsTypesTypeIdLocationsLocationIdGetWithHttpInfo (string typeId, string locationId)
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
                throw new ApiException(400, "Missing required parameter 'typeId' when calling DefaultApi->ProductsTypesTypeIdLocationsLocationIdGet");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling DefaultApi->ProductsTypesTypeIdLocationsLocationIdGet");

            var localVarPath = "/products/types/{typeId}/locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (typeId != null) localVarPathParams.Add("typeId", this.Configuration.ApiClient.ParameterToString(typeId)); // path parameter
            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsTypesTypeIdLocationsLocationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of text products of a given type for a given issuance location
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <param name="locationId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductsTypesTypeIdLocationsLocationIdGetAsync (string typeId, string locationId)
        {
             await ProductsTypesTypeIdLocationsLocationIdGetAsyncWithHttpInfo(typeId, locationId);

        }

        /// <summary>
        ///  Returns a list of text products of a given type for a given issuance location
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <param name="locationId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ProductsTypesTypeIdLocationsLocationIdGetAsyncWithHttpInfo (string typeId, string locationId)
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
                throw new ApiException(400, "Missing required parameter 'typeId' when calling DefaultApi->ProductsTypesTypeIdLocationsLocationIdGet");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling DefaultApi->ProductsTypesTypeIdLocationsLocationIdGet");

            var localVarPath = "/products/types/{typeId}/locations/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (typeId != null) localVarPathParams.Add("typeId", this.Configuration.ApiClient.ParameterToString(typeId)); // path parameter
            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsTypesTypeIdLocationsLocationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns metadata about a given radar wind profiler
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="time">Time interval (optional)</param>
        /// <param name="interval">Averaging interval (optional)</param>
        /// <returns></returns>
        public void RadarProfilersStationIdGet (string stationId, string time = null, string interval = null)
        {
             RadarProfilersStationIdGetWithHttpInfo(stationId, time, interval);
        }

        /// <summary>
        ///  Returns metadata about a given radar wind profiler
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="time">Time interval (optional)</param>
        /// <param name="interval">Averaging interval (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RadarProfilersStationIdGetWithHttpInfo (string stationId, string time = null, string interval = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->RadarProfilersStationIdGet");

            var localVarPath = "/radar/profilers/{stationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (time != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "time", time)); // query parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RadarProfilersStationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns metadata about a given radar wind profiler
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="time">Time interval (optional)</param>
        /// <param name="interval">Averaging interval (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RadarProfilersStationIdGetAsync (string stationId, string time = null, string interval = null)
        {
             await RadarProfilersStationIdGetAsyncWithHttpInfo(stationId, time, interval);

        }

        /// <summary>
        ///  Returns metadata about a given radar wind profiler
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="time">Time interval (optional)</param>
        /// <param name="interval">Averaging interval (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RadarProfilersStationIdGetAsyncWithHttpInfo (string stationId, string time = null, string interval = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->RadarProfilersStationIdGet");

            var localVarPath = "/radar/profilers/{stationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (time != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "time", time)); // query parameter
            if (interval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "interval", interval)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RadarProfilersStationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns metadata about a given radar queue
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host"></param>
        /// <param name="limit">Record limit (optional)</param>
        /// <param name="arrived">Range for arrival time (optional)</param>
        /// <param name="created">Range for creation time (optional)</param>
        /// <param name="published">Range for publish time (optional)</param>
        /// <param name="station">Station identifier (optional)</param>
        /// <param name="type">Record type (optional)</param>
        /// <param name="feed">Originating product feed (optional)</param>
        /// <param name="resolution">Resolution version (optional)</param>
        /// <returns></returns>
        public void RadarQueuesHostGet (string host, int? limit = null, string arrived = null, string created = null, string published = null, string station = null, string type = null, string feed = null, int? resolution = null)
        {
             RadarQueuesHostGetWithHttpInfo(host, limit, arrived, created, published, station, type, feed, resolution);
        }

        /// <summary>
        ///  Returns metadata about a given radar queue
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host"></param>
        /// <param name="limit">Record limit (optional)</param>
        /// <param name="arrived">Range for arrival time (optional)</param>
        /// <param name="created">Range for creation time (optional)</param>
        /// <param name="published">Range for publish time (optional)</param>
        /// <param name="station">Station identifier (optional)</param>
        /// <param name="type">Record type (optional)</param>
        /// <param name="feed">Originating product feed (optional)</param>
        /// <param name="resolution">Resolution version (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RadarQueuesHostGetWithHttpInfo (string host, int? limit = null, string arrived = null, string created = null, string published = null, string station = null, string type = null, string feed = null, int? resolution = null)
        {
            // verify the required parameter 'host' is set
            if (host == null)
                throw new ApiException(400, "Missing required parameter 'host' when calling DefaultApi->RadarQueuesHostGet");

            var localVarPath = "/radar/queues/{host}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (host != null) localVarPathParams.Add("host", this.Configuration.ApiClient.ParameterToString(host)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (arrived != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "arrived", arrived)); // query parameter
            if (created != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created", created)); // query parameter
            if (published != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "published", published)); // query parameter
            if (station != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "station", station)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (feed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "feed", feed)); // query parameter
            if (resolution != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolution", resolution)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RadarQueuesHostGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns metadata about a given radar queue
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host"></param>
        /// <param name="limit">Record limit (optional)</param>
        /// <param name="arrived">Range for arrival time (optional)</param>
        /// <param name="created">Range for creation time (optional)</param>
        /// <param name="published">Range for publish time (optional)</param>
        /// <param name="station">Station identifier (optional)</param>
        /// <param name="type">Record type (optional)</param>
        /// <param name="feed">Originating product feed (optional)</param>
        /// <param name="resolution">Resolution version (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RadarQueuesHostGetAsync (string host, int? limit = null, string arrived = null, string created = null, string published = null, string station = null, string type = null, string feed = null, int? resolution = null)
        {
             await RadarQueuesHostGetAsyncWithHttpInfo(host, limit, arrived, created, published, station, type, feed, resolution);

        }

        /// <summary>
        ///  Returns metadata about a given radar queue
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="host"></param>
        /// <param name="limit">Record limit (optional)</param>
        /// <param name="arrived">Range for arrival time (optional)</param>
        /// <param name="created">Range for creation time (optional)</param>
        /// <param name="published">Range for publish time (optional)</param>
        /// <param name="station">Station identifier (optional)</param>
        /// <param name="type">Record type (optional)</param>
        /// <param name="feed">Originating product feed (optional)</param>
        /// <param name="resolution">Resolution version (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RadarQueuesHostGetAsyncWithHttpInfo (string host, int? limit = null, string arrived = null, string created = null, string published = null, string station = null, string type = null, string feed = null, int? resolution = null)
        {
            // verify the required parameter 'host' is set
            if (host == null)
                throw new ApiException(400, "Missing required parameter 'host' when calling DefaultApi->RadarQueuesHostGet");

            var localVarPath = "/radar/queues/{host}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (host != null) localVarPathParams.Add("host", this.Configuration.ApiClient.ParameterToString(host)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (arrived != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "arrived", arrived)); // query parameter
            if (created != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "created", created)); // query parameter
            if (published != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "published", published)); // query parameter
            if (station != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "station", station)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (feed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "feed", feed)); // query parameter
            if (resolution != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolution", resolution)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RadarQueuesHostGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of radar servers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <returns></returns>
        public void RadarServersGet (string reportingHost = null)
        {
             RadarServersGetWithHttpInfo(reportingHost);
        }

        /// <summary>
        ///  Returns a list of radar servers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RadarServersGetWithHttpInfo (string reportingHost = null)
        {

            var localVarPath = "/radar/servers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportingHost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reportingHost", reportingHost)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RadarServersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of radar servers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RadarServersGetAsync (string reportingHost = null)
        {
             await RadarServersGetAsyncWithHttpInfo(reportingHost);

        }

        /// <summary>
        ///  Returns a list of radar servers
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RadarServersGetAsyncWithHttpInfo (string reportingHost = null)
        {

            var localVarPath = "/radar/servers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (reportingHost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reportingHost", reportingHost)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RadarServersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns metadata about a given radar server
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <returns></returns>
        public void RadarServersIdGet (string id, string reportingHost = null)
        {
             RadarServersIdGetWithHttpInfo(id, reportingHost);
        }

        /// <summary>
        ///  Returns metadata about a given radar server
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RadarServersIdGetWithHttpInfo (string id, string reportingHost = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->RadarServersIdGet");

            var localVarPath = "/radar/servers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (reportingHost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reportingHost", reportingHost)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RadarServersIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns metadata about a given radar server
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RadarServersIdGetAsync (string id, string reportingHost = null)
        {
             await RadarServersIdGetAsyncWithHttpInfo(id, reportingHost);

        }

        /// <summary>
        ///  Returns metadata about a given radar server
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="reportingHost">Show records from specific reporting host (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RadarServersIdGetAsyncWithHttpInfo (string id, string reportingHost = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->RadarServersIdGet");

            var localVarPath = "/radar/servers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (reportingHost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reportingHost", reportingHost)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RadarServersIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of radar stations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationType">Limit results to a specific station type or types (optional)</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <returns></returns>
        public void RadarStationsGet (List<string> stationType = null, string reportingHost = null, string host = null)
        {
             RadarStationsGetWithHttpInfo(stationType, reportingHost, host);
        }

        /// <summary>
        ///  Returns a list of radar stations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationType">Limit results to a specific station type or types (optional)</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RadarStationsGetWithHttpInfo (List<string> stationType = null, string reportingHost = null, string host = null)
        {

            var localVarPath = "/radar/stations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "stationType", stationType)); // query parameter
            if (reportingHost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reportingHost", reportingHost)); // query parameter
            if (host != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "host", host)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RadarStationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of radar stations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationType">Limit results to a specific station type or types (optional)</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RadarStationsGetAsync (List<string> stationType = null, string reportingHost = null, string host = null)
        {
             await RadarStationsGetAsyncWithHttpInfo(stationType, reportingHost, host);

        }

        /// <summary>
        ///  Returns a list of radar stations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationType">Limit results to a specific station type or types (optional)</param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RadarStationsGetAsyncWithHttpInfo (List<string> stationType = null, string reportingHost = null, string host = null)
        {

            var localVarPath = "/radar/stations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "stationType", stationType)); // query parameter
            if (reportingHost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reportingHost", reportingHost)); // query parameter
            if (host != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "host", host)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RadarStationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns metadata about a given radar station alarms
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns></returns>
        public void RadarStationsStationIdAlarmsGet (string stationId)
        {
             RadarStationsStationIdAlarmsGetWithHttpInfo(stationId);
        }

        /// <summary>
        ///  Returns metadata about a given radar station alarms
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RadarStationsStationIdAlarmsGetWithHttpInfo (string stationId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->RadarStationsStationIdAlarmsGet");

            var localVarPath = "/radar/stations/{stationId}/alarms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RadarStationsStationIdAlarmsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns metadata about a given radar station alarms
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RadarStationsStationIdAlarmsGetAsync (string stationId)
        {
             await RadarStationsStationIdAlarmsGetAsyncWithHttpInfo(stationId);

        }

        /// <summary>
        ///  Returns metadata about a given radar station alarms
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RadarStationsStationIdAlarmsGetAsyncWithHttpInfo (string stationId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->RadarStationsStationIdAlarmsGet");

            var localVarPath = "/radar/stations/{stationId}/alarms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RadarStationsStationIdAlarmsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns metadata about a given radar station
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <returns></returns>
        public void RadarStationsStationIdGet (string stationId, string reportingHost = null, string host = null)
        {
             RadarStationsStationIdGetWithHttpInfo(stationId, reportingHost, host);
        }

        /// <summary>
        ///  Returns metadata about a given radar station
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RadarStationsStationIdGetWithHttpInfo (string stationId, string reportingHost = null, string host = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->RadarStationsStationIdGet");

            var localVarPath = "/radar/stations/{stationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (reportingHost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reportingHost", reportingHost)); // query parameter
            if (host != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "host", host)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RadarStationsStationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns metadata about a given radar station
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RadarStationsStationIdGetAsync (string stationId, string reportingHost = null, string host = null)
        {
             await RadarStationsStationIdGetAsyncWithHttpInfo(stationId, reportingHost, host);

        }

        /// <summary>
        ///  Returns metadata about a given radar station
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="reportingHost">Show RDA and latency info from specific reporting host (optional)</param>
        /// <param name="host">Show latency info from specific LDM host (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RadarStationsStationIdGetAsyncWithHttpInfo (string stationId, string reportingHost = null, string host = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->RadarStationsStationIdGet");

            var localVarPath = "/radar/stations/{stationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (reportingHost != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reportingHost", reportingHost)); // query parameter
            if (host != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "host", host)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RadarStationsStationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of observation stations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">State abbreviation (optional)</param>
        /// <param name="state">State/marine area code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns></returns>
        public void StationsGet (List<string> id = null, List<string> state = null, int? limit = null)
        {
             StationsGetWithHttpInfo(id, state, limit);
        }

        /// <summary>
        ///  Returns a list of observation stations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">State abbreviation (optional)</param>
        /// <param name="state">State/marine area code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StationsGetWithHttpInfo (List<string> id = null, List<string> state = null, int? limit = null)
        {

            var localVarPath = "/stations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "id", id)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "state", state)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of observation stations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">State abbreviation (optional)</param>
        /// <param name="state">State/marine area code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StationsGetAsync (List<string> id = null, List<string> state = null, int? limit = null)
        {
             await StationsGetAsyncWithHttpInfo(id, state, limit);

        }

        /// <summary>
        ///  Returns a list of observation stations
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">State abbreviation (optional)</param>
        /// <param name="state">State/marine area code (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StationsGetAsyncWithHttpInfo (List<string> id = null, List<string> state = null, int? limit = null)
        {

            var localVarPath = "/stations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "id", id)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "state", state)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns metadata about a given observation station
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns></returns>
        public void StationsStationIdGet (string stationId)
        {
             StationsStationIdGetWithHttpInfo(stationId);
        }

        /// <summary>
        ///  Returns metadata about a given observation station
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StationsStationIdGetWithHttpInfo (string stationId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->StationsStationIdGet");

            var localVarPath = "/stations/{stationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StationsStationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns metadata about a given observation station
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StationsStationIdGetAsync (string stationId)
        {
             await StationsStationIdGetAsyncWithHttpInfo(stationId);

        }

        /// <summary>
        ///  Returns metadata about a given observation station
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StationsStationIdGetAsyncWithHttpInfo (string stationId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->StationsStationIdGet");

            var localVarPath = "/stations/{stationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StationsStationIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns the latest observation for a station (use &#x27;/latest&#x27; instead)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <returns></returns>
        public void StationsStationIdObservationsCurrentGet (string stationId, bool? requireQc = null)
        {
             StationsStationIdObservationsCurrentGetWithHttpInfo(stationId, requireQc);
        }

        /// <summary>
        ///  Returns the latest observation for a station (use &#x27;/latest&#x27; instead)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StationsStationIdObservationsCurrentGetWithHttpInfo (string stationId, bool? requireQc = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->StationsStationIdObservationsCurrentGet");

            var localVarPath = "/stations/{stationId}/observations/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.obs+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (requireQc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "require_qc", requireQc)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StationsStationIdObservationsCurrentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns the latest observation for a station (use &#x27;/latest&#x27; instead)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StationsStationIdObservationsCurrentGetAsync (string stationId, bool? requireQc = null)
        {
             await StationsStationIdObservationsCurrentGetAsyncWithHttpInfo(stationId, requireQc);

        }

        /// <summary>
        ///  Returns the latest observation for a station (use &#x27;/latest&#x27; instead)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StationsStationIdObservationsCurrentGetAsyncWithHttpInfo (string stationId, bool? requireQc = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->StationsStationIdObservationsCurrentGet");

            var localVarPath = "/stations/{stationId}/observations/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.obs+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (requireQc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "require_qc", requireQc)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StationsStationIdObservationsCurrentGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of observations for a given station
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="station">Station ID (optional)</param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns></returns>
        public void StationsStationIdObservationsGet (string stationId, List<string> station = null, DateTime? start = null, DateTime? end = null, int? limit = null)
        {
             StationsStationIdObservationsGetWithHttpInfo(stationId, station, start, end, limit);
        }

        /// <summary>
        ///  Returns a list of observations for a given station
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="station">Station ID (optional)</param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StationsStationIdObservationsGetWithHttpInfo (string stationId, List<string> station = null, DateTime? start = null, DateTime? end = null, int? limit = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->StationsStationIdObservationsGet");

            var localVarPath = "/stations/{stationId}/observations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (station != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "station", station)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StationsStationIdObservationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of observations for a given station
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="station">Station ID (optional)</param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StationsStationIdObservationsGetAsync (string stationId, List<string> station = null, DateTime? start = null, DateTime? end = null, int? limit = null)
        {
             await StationsStationIdObservationsGetAsyncWithHttpInfo(stationId, station, start, end, limit);

        }

        /// <summary>
        ///  Returns a list of observations for a given station
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="station">Station ID (optional)</param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StationsStationIdObservationsGetAsyncWithHttpInfo (string stationId, List<string> station = null, DateTime? start = null, DateTime? end = null, int? limit = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->StationsStationIdObservationsGet");

            var localVarPath = "/stations/{stationId}/observations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (station != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "station", station)); // query parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StationsStationIdObservationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns the latest observation for a station
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <returns></returns>
        public void StationsStationIdObservationsLatestGet (string stationId, bool? requireQc = null)
        {
             StationsStationIdObservationsLatestGetWithHttpInfo(stationId, requireQc);
        }

        /// <summary>
        ///  Returns the latest observation for a station
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StationsStationIdObservationsLatestGetWithHttpInfo (string stationId, bool? requireQc = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->StationsStationIdObservationsLatestGet");

            var localVarPath = "/stations/{stationId}/observations/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.obs+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (requireQc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "require_qc", requireQc)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StationsStationIdObservationsLatestGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns the latest observation for a station
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StationsStationIdObservationsLatestGetAsync (string stationId, bool? requireQc = null)
        {
             await StationsStationIdObservationsLatestGetAsyncWithHttpInfo(stationId, requireQc);

        }

        /// <summary>
        ///  Returns the latest observation for a station
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="requireQc">Require QC (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StationsStationIdObservationsLatestGetAsyncWithHttpInfo (string stationId, bool? requireQc = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->StationsStationIdObservationsLatestGet");

            var localVarPath = "/stations/{stationId}/observations/latest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.obs+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (requireQc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "require_qc", requireQc)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StationsStationIdObservationsLatestGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a single observation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="time"></param>
        /// <returns></returns>
        public void StationsStationIdObservationsTimeGet (string stationId, DateTime? time)
        {
             StationsStationIdObservationsTimeGetWithHttpInfo(stationId, time);
        }

        /// <summary>
        ///  Returns a single observation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="time"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StationsStationIdObservationsTimeGetWithHttpInfo (string stationId, DateTime? time)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->StationsStationIdObservationsTimeGet");
            // verify the required parameter 'time' is set
            if (time == null)
                throw new ApiException(400, "Missing required parameter 'time' when calling DefaultApi->StationsStationIdObservationsTimeGet");

            var localVarPath = "/stations/{stationId}/observations/{time}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.obs+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (time != null) localVarPathParams.Add("time", this.Configuration.ApiClient.ParameterToString(time)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StationsStationIdObservationsTimeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a single observation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="time"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StationsStationIdObservationsTimeGetAsync (string stationId, DateTime? time)
        {
             await StationsStationIdObservationsTimeGetAsyncWithHttpInfo(stationId, time);

        }

        /// <summary>
        ///  Returns a single observation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="time"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StationsStationIdObservationsTimeGetAsyncWithHttpInfo (string stationId, DateTime? time)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->StationsStationIdObservationsTimeGet");
            // verify the required parameter 'time' is set
            if (time == null)
                throw new ApiException(400, "Missing required parameter 'time' when calling DefaultApi->StationsStationIdObservationsTimeGet");

            var localVarPath = "/stations/{stationId}/observations/{time}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/vnd.noaa.obs+xml",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarPathParams.Add("stationId", this.Configuration.ApiClient.ParameterToString(stationId)); // path parameter
            if (time != null) localVarPathParams.Add("time", this.Configuration.ApiClient.ParameterToString(time)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StationsStationIdObservationsTimeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a thumbnail image for a satellite region
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"></param>
        /// <returns></returns>
        public void ThumbnailsSatelliteAreaGet (string area)
        {
             ThumbnailsSatelliteAreaGetWithHttpInfo(area);
        }

        /// <summary>
        ///  Returns a thumbnail image for a satellite region
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ThumbnailsSatelliteAreaGetWithHttpInfo (string area)
        {
            // verify the required parameter 'area' is set
            if (area == null)
                throw new ApiException(400, "Missing required parameter 'area' when calling DefaultApi->ThumbnailsSatelliteAreaGet");

            var localVarPath = "/thumbnails/satellite/{area}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/jpeg",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (area != null) localVarPathParams.Add("area", this.Configuration.ApiClient.ParameterToString(area)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ThumbnailsSatelliteAreaGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a thumbnail image for a satellite region
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ThumbnailsSatelliteAreaGetAsync (string area)
        {
             await ThumbnailsSatelliteAreaGetAsyncWithHttpInfo(area);

        }

        /// <summary>
        ///  Returns a thumbnail image for a satellite region
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="area"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ThumbnailsSatelliteAreaGetAsyncWithHttpInfo (string area)
        {
            // verify the required parameter 'area' is set
            if (area == null)
                throw new ApiException(400, "Missing required parameter 'area' when calling DefaultApi->ThumbnailsSatelliteAreaGet");

            var localVarPath = "/thumbnails/satellite/{area}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/jpeg",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (area != null) localVarPathParams.Add("area", this.Configuration.ApiClient.ParameterToString(area)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ThumbnailsSatelliteAreaGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of observations for a given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns></returns>
        public void ZonesForecastZoneIdObservationsGet (string zoneId, DateTime? start = null, DateTime? end = null, int? limit = null)
        {
             ZonesForecastZoneIdObservationsGetWithHttpInfo(zoneId, start, end, limit);
        }

        /// <summary>
        ///  Returns a list of observations for a given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ZonesForecastZoneIdObservationsGetWithHttpInfo (string zoneId, DateTime? start = null, DateTime? end = null, int? limit = null)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->ZonesForecastZoneIdObservationsGet");

            var localVarPath = "/zones/forecast/{zoneId}/observations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZonesForecastZoneIdObservationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of observations for a given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ZonesForecastZoneIdObservationsGetAsync (string zoneId, DateTime? start = null, DateTime? end = null, int? limit = null)
        {
             await ZonesForecastZoneIdObservationsGetAsyncWithHttpInfo(zoneId, start, end, limit);

        }

        /// <summary>
        ///  Returns a list of observations for a given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <param name="start">Start date/time (optional)</param>
        /// <param name="end">End date/time (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ZonesForecastZoneIdObservationsGetAsyncWithHttpInfo (string zoneId, DateTime? start = null, DateTime? end = null, int? limit = null)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->ZonesForecastZoneIdObservationsGet");

            var localVarPath = "/zones/forecast/{zoneId}/observations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZonesForecastZoneIdObservationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of observation stations for a given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns></returns>
        public void ZonesForecastZoneIdStationsGet (string zoneId)
        {
             ZonesForecastZoneIdStationsGetWithHttpInfo(zoneId);
        }

        /// <summary>
        ///  Returns a list of observation stations for a given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ZonesForecastZoneIdStationsGetWithHttpInfo (string zoneId)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->ZonesForecastZoneIdStationsGet");

            var localVarPath = "/zones/forecast/{zoneId}/stations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZonesForecastZoneIdStationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of observation stations for a given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ZonesForecastZoneIdStationsGetAsync (string zoneId)
        {
             await ZonesForecastZoneIdStationsGetAsyncWithHttpInfo(zoneId);

        }

        /// <summary>
        ///  Returns a list of observation stations for a given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ZonesForecastZoneIdStationsGetAsyncWithHttpInfo (string zoneId)
        {
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->ZonesForecastZoneIdStationsGet");

            var localVarPath = "/zones/forecast/{zoneId}/stations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZonesForecastZoneIdStationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of zones
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns></returns>
        public void ZonesGet (List<string> id = null, List<string> area = null, List<string> region = null, List<string> type = null, string point = null, bool? includeGeometry = null, int? limit = null, DateTime? effective = null)
        {
             ZonesGetWithHttpInfo(id, area, region, type, point, includeGeometry, limit, effective);
        }

        /// <summary>
        ///  Returns a list of zones
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ZonesGetWithHttpInfo (List<string> id = null, List<string> area = null, List<string> region = null, List<string> type = null, string point = null, bool? includeGeometry = null, int? limit = null, DateTime? effective = null)
        {

            var localVarPath = "/zones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "id", id)); // query parameter
            if (area != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "area", area)); // query parameter
            if (region != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "region", region)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "type", type)); // query parameter
            if (point != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "point", point)); // query parameter
            if (includeGeometry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_geometry", includeGeometry)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (effective != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "effective", effective)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZonesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of zones
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ZonesGetAsync (List<string> id = null, List<string> area = null, List<string> region = null, List<string> type = null, string point = null, bool? includeGeometry = null, int? limit = null, DateTime? effective = null)
        {
             await ZonesGetAsyncWithHttpInfo(id, area, region, type, point, includeGeometry, limit, effective);

        }

        /// <summary>
        ///  Returns a list of zones
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ZonesGetAsyncWithHttpInfo (List<string> id = null, List<string> area = null, List<string> region = null, List<string> type = null, string point = null, bool? includeGeometry = null, int? limit = null, DateTime? effective = null)
        {

            var localVarPath = "/zones";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "id", id)); // query parameter
            if (area != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "area", area)); // query parameter
            if (region != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "region", region)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "type", type)); // query parameter
            if (point != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "point", point)); // query parameter
            if (includeGeometry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_geometry", includeGeometry)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (effective != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "effective", effective)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZonesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of zones of a given type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns></returns>
        public void ZonesTypeGet (string type, List<string> id = null, List<string> area = null, List<string> region = null, List<string> type = null, string point = null, bool? includeGeometry = null, int? limit = null, DateTime? effective = null)
        {
             ZonesTypeGetWithHttpInfo(type, id, area, region, type, point, includeGeometry, limit, effective);
        }

        /// <summary>
        ///  Returns a list of zones of a given type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ZonesTypeGetWithHttpInfo (string type, List<string> id = null, List<string> area = null, List<string> region = null, List<string> type = null, string point = null, bool? includeGeometry = null, int? limit = null, DateTime? effective = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->ZonesTypeGet");

            var localVarPath = "/zones/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "id", id)); // query parameter
            if (area != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "area", area)); // query parameter
            if (region != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "region", region)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "type", type)); // query parameter
            if (point != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "point", point)); // query parameter
            if (includeGeometry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_geometry", includeGeometry)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (effective != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "effective", effective)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZonesTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns a list of zones of a given type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ZonesTypeGetAsync (string type, List<string> id = null, List<string> area = null, List<string> region = null, List<string> type = null, string point = null, bool? includeGeometry = null, int? limit = null, DateTime? effective = null)
        {
             await ZonesTypeGetAsyncWithHttpInfo(type, id, area, region, type, point, includeGeometry, limit, effective);

        }

        /// <summary>
        ///  Returns a list of zones of a given type
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="id">Zone ID (forecast or county) (optional)</param>
        /// <param name="area">State/marine area code (optional)</param>
        /// <param name="region">Region code (optional)</param>
        /// <param name="type">Zone type (optional)</param>
        /// <param name="point">Point (latitude,longitude) (optional)</param>
        /// <param name="includeGeometry">Include geometry in results (true/false) (optional)</param>
        /// <param name="limit">Limit (optional)</param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ZonesTypeGetAsyncWithHttpInfo (string type, List<string> id = null, List<string> area = null, List<string> region = null, List<string> type = null, string point = null, bool? includeGeometry = null, int? limit = null, DateTime? effective = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->ZonesTypeGet");

            var localVarPath = "/zones/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "id", id)); // query parameter
            if (area != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "area", area)); // query parameter
            if (region != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "region", region)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "type", type)); // query parameter
            if (point != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "point", point)); // query parameter
            if (includeGeometry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_geometry", includeGeometry)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (effective != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "effective", effective)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZonesTypeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns the current zone forecast for a given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="zoneId"></param>
        /// <returns></returns>
        public void ZonesTypeZoneIdForecastGet (string type, string zoneId)
        {
             ZonesTypeZoneIdForecastGetWithHttpInfo(type, zoneId);
        }

        /// <summary>
        ///  Returns the current zone forecast for a given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="zoneId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ZonesTypeZoneIdForecastGetWithHttpInfo (string type, string zoneId)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->ZonesTypeZoneIdForecastGet");
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->ZonesTypeZoneIdForecastGet");

            var localVarPath = "/zones/{type}/{zoneId}/forecast";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZonesTypeZoneIdForecastGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns the current zone forecast for a given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="zoneId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ZonesTypeZoneIdForecastGetAsync (string type, string zoneId)
        {
             await ZonesTypeZoneIdForecastGetAsyncWithHttpInfo(type, zoneId);

        }

        /// <summary>
        ///  Returns the current zone forecast for a given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="zoneId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ZonesTypeZoneIdForecastGetAsyncWithHttpInfo (string type, string zoneId)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->ZonesTypeZoneIdForecastGet");
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->ZonesTypeZoneIdForecastGet");

            var localVarPath = "/zones/{type}/{zoneId}/forecast";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZonesTypeZoneIdForecastGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns metadata about a given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="zoneId"></param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns></returns>
        public void ZonesTypeZoneIdGet (string type, string zoneId, DateTime? effective = null)
        {
             ZonesTypeZoneIdGetWithHttpInfo(type, zoneId, effective);
        }

        /// <summary>
        ///  Returns metadata about a given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="zoneId"></param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ZonesTypeZoneIdGetWithHttpInfo (string type, string zoneId, DateTime? effective = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->ZonesTypeZoneIdGet");
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->ZonesTypeZoneIdGet");

            var localVarPath = "/zones/{type}/{zoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter
            if (effective != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "effective", effective)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZonesTypeZoneIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Returns metadata about a given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="zoneId"></param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ZonesTypeZoneIdGetAsync (string type, string zoneId, DateTime? effective = null)
        {
             await ZonesTypeZoneIdGetAsyncWithHttpInfo(type, zoneId, effective);

        }

        /// <summary>
        ///  Returns metadata about a given zone
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <param name="zoneId"></param>
        /// <param name="effective">Effective date/time (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ZonesTypeZoneIdGetAsyncWithHttpInfo (string type, string zoneId, DateTime? effective = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->ZonesTypeZoneIdGet");
            // verify the required parameter 'zoneId' is set
            if (zoneId == null)
                throw new ApiException(400, "Missing required parameter 'zoneId' when calling DefaultApi->ZonesTypeZoneIdGet");

            var localVarPath = "/zones/{type}/{zoneId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/geo+json",
                "application/ld+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (zoneId != null) localVarPathParams.Add("zoneId", this.Configuration.ApiClient.ParameterToString(zoneId)); // path parameter
            if (effective != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "effective", effective)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ZonesTypeZoneIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
